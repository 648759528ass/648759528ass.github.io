<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithm on Jhas's Blog</title><link>https://blog.jhas.site/categories/algorithm/</link><description>Recent content in Algorithm on Jhas's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Feb 2022 12:07:04 +0800</lastBuildDate><atom:link href="https://blog.jhas.site/categories/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>二分范围查找笔记</title><link>https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 10 Feb 2022 12:07:04 +0800</pubDate><guid>https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/</guid><description>二分搜索 简述 二分搜索是一种效率较高的查找方法，用于在有序(二段)数组内查找一个特定数。得益于有序(二段)数组的性质，每一次查找可以筛除一段数量大于一的数段(常见为$\frac{n}{2} $),故能在$ O(\log n) $的时间复杂度内找到对应答案。
二分的本质是二段性而不是单调性
应用 二分通常被用于一个有序数组查找一个数或一个位置，这个数通常是一个最小或最大值/位置(边界位置)。
常见二分通常有两种：
整数二分 浮点二分 整数二分 整数二分通常查找一个范围的上界或下界
比如说不超过/不低于某个数最大/最小的数的位置与其值。
总的来说，查找的区间可以被分为两个部分，一个部分满足条件，另一部分不满足条件，答案则在两部分的交点。
浮点二分 通常是函数求根、开方等问题，比较简单，while循环终止条件是精度e，更新时l和r都更新为mid即可。
基本代码 整数二分有两种，一种是寻找上界(即寻找不符合性质的最后一个点)，一种是下界(即寻找符合性质的第一个点)
整数二分上界 1 2 3 4 5 6 7 8 9 10 int bsearch(int l, int r) { while (l &amp;lt; r) { int mid = l + r + 1 &amp;gt;&amp;gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 整数二分下界 1 2 3 4 5 6 7 8 9 10 int bsearch(int l, int r) { while (l &amp;lt; r) { int mid = l + r &amp;gt;&amp;gt; 1; if (check(mid)) r = mid; else l = mid + 1; } return l; } 浮点二分则比较单调，通常是函数求根、开方等问题</description></item></channel></rss>