<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>median on Jhas's Blog</title><link>https://blog.jhas.site/tags/median/</link><description>Recent content in median on Jhas's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 24 Feb 2022 20:14:15 +0800</lastBuildDate><atom:link href="https://blog.jhas.site/tags/median/index.xml" rel="self" type="application/rss+xml"/><item><title>20220224 每日一题 Leetcode1706 球会落何处</title><link>https://blog.jhas.site/p/20220224-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1706-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</link><pubDate>Thu, 24 Feb 2022 20:14:15 +0800</pubDate><guid>https://blog.jhas.site/p/20220224-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1706-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</guid><description>1706. 球会落何处 题面 用一个大小为 $m * n$ 的二维网格 $grid$ 表示一个箱子。你有 $n$ 颗球。箱子的顶部和底部都是开着的。
箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。
将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 &amp;ldquo;V&amp;rdquo; 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。
返回一个大小为 n 的数组 answer ，其中 $answer[i]$ 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 $-1$ 。
解析 显然对于每一个下落的球，我们只需要模拟即可.
对于每一个球,如果他现在的位置在$(x,y)$ 这格的顶部
如果该格为'/' 则其左边格$(x,y-1)$必须为也为'/' 才能落到$(x+1,y-1)$ 处 如果该格为'' 则其左边格$(x,y+1)$必须为也为'' 才能落到$(x+1,y+1)$ 处 否则其被拦下 我们可以用递归来得到每一个球最后下落到的位置,只需在每个(x,y) 判断是否能够继续下落，可以就继续判断下个(x,y)否则返回-1,递归终止条件为: $x == m$
解法 时间复杂度:$ O(n*m) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: int n,m; vector&amp;lt;int&amp;gt; findBall(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { vector&amp;lt;int&amp;gt; ret; n = grid[0].</description></item><item><title>20220217 每日一题 Leetcode688 骑士在棋盘上的概率</title><link>https://blog.jhas.site/p/20220217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</link><pubDate>Thu, 17 Feb 2022 00:05:45 +0800</pubDate><guid>https://blog.jhas.site/p/20220217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</guid><description>688. 骑士在棋盘上的概率 题面 在一个 $n * n$ 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 $k$ 次移动。行和列是 从 $0$ 开始 的，所以左上单元格是 $(0,0)$ ，右下单元格是 $(n - 1, n - 1)$ 。
象棋骑士有$8$种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。
每次骑士要移动时，它都会随机从$8$种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。
骑士继续移动，直到它走了 $k$ 步或离开了棋盘。
返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。
解析 由于对于每一次的移动，其到某格的概率为该格其八个方向到该格的概率，则设dp方程为 $$ dp[0][row][column] = 1\ dp[k][i][j] = \sum_{n=0}^7 dp[k-1][i+x_n][j+y_n] * \frac{1}{8}\ $$ 其中 $$ x[8] = {-2,-2,-1,-1,1,1,2,2};\ y[8] = {-1,1,2,-2,2,-2,-1,1};\ $$ 最后统计$dp[k]$中所有值的和，即为最后留在棋盘上的概率
同时由于每一层的dp仅依赖于上一层的dp，故可以用奇偶性来压缩数组大小
代码 时间复杂度:$ O(k*n^2) $
空间复杂度:$ O(n^2) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public: double dp[2][25][25]; int tx[8] = {-2,-2,-1,-1,1,1,2,2}; int ty[8] = {-1,1,2,-2,2,-2,-1,1}; double knightProbability(int n, int k, int row, int column) { dp[0][row][column] = 1.</description></item><item><title>20220214 每日一题 Leetcode540 有序数组中的单一元素</title><link>https://blog.jhas.site/p/20220214-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/</link><pubDate>Mon, 14 Feb 2022 07:48:38 +0800</pubDate><guid>https://blog.jhas.site/p/20220214-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/</guid><description>540. 有序数组中的单一元素 题面 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。
请你找出并返回只出现一次的那个数。
你设计的解决方案必须满足 $O(\log n)$ 时间复杂度和 $O(1)$ 空间复杂度。
呜呜呜，破防了。我就是这个单一元素吧QAQ
解析 如果不在意题的$ O(\log n) $特殊要求的话，其实可以直接对整个数组异或和即可得到这单一元素(成双成对的元素都各自领走自己的另一半出去约会去了，就剩这单一元素QAQ)
回到题面上，按着题面的$O(\log n)$要求的话则是需要用到二分。属于是一道非常经典的二段性分析的题。
假设单一元素的下标为 $ k $ , 则有下列条件
设$ \forall i \in N, 2i &amp;lt; k $
那么有 $ nums[2i] == nums[2i+1] $
且对于$ \forall i \in N, 2i &amp;gt; k $
有$ nums[2i] == nums[2i-1] $
可以说$nums[k]$干扰了成对数组的序列，使其的规律改变，使数组的性质变成了二段。
至此其实已经分析完毕了一种做法:对偶数下标进行二分。
为了减少代码量，我们将偶数做法扩展到自然数做法。
设$ \forall i \in N , i &amp;lt; k$
若$i$为奇数则$nums[i] == nums[i-1]$
若$i$为偶数则$ nums[i] == nums[i+1] $</description></item><item><title>20220212 每日一题 Leetcode1020 飞地的数量</title><link>https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/</link><pubDate>Sat, 12 Feb 2022 09:50:17 +0800</pubDate><guid>https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/</guid><description>1020. 飞地的数量 题面 给你一个大小为 $m * n$ 的二进制矩阵 $grid$ ，其中 $0$ 表示一个海洋单元格、$1$ 表示一个陆地单元格。
一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 $grid$ 的边界。
返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。
解析 题目非常白给，求无法 在任意次数的移动中离开网格边界的陆地单元格的数量，也即不与边界有相联的联通块，这时我们有两种思路：
从边界块出发，看看边界块延伸的最长块 从每一块陆地块出发，看看是否能到边界 两种情况正好对应了两种解法:
多源dfs/bfs 并查集 解法一 dfs和bfs在这题的情况下效果是一样的，首先记录下每一个边界陆地块，然后从边界陆地块出发搜索陆地块，如果可以碰到则把碰到的块1变为0，最后遍历grid标记其值为1的数量。
由于我们每次碰到后都会把1标为0，所以每一个块实际入 栈/队列 次数为 $n*m$
所以时间复杂度:$O(mn)$
代码如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { int n = grid.</description></item><item><title>20220210 每日一题 Leetcode1447 最简分数</title><link>https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/</link><pubDate>Thu, 10 Feb 2022 08:40:23 +0800</pubDate><guid>https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/</guid><description>1447. 最简分数 题面 给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。
解析 非常简单的暴力数论题，对于任意 $ i$ $j $ 来说，满足 $ 0&amp;lt; j/i &amp;lt;1 $ 即满足 $ j &amp;lt; i $ ,考虑到 $ 1\leq n \leq 100 $ 则只需暴力枚举每一个 $i$,$j$ 即可得出答案，对于任意$i$,$j$ ，满足$ j/i $为最简分数，即两数不可同时除以任意数且结果为整数，即两数互质，等价于 $ gcd(i,j) = 1 $
解法 时间复杂度:$ O(n^2\log n) $
代码如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public: vector&amp;lt;string&amp;gt; simplifiedFractions(int n) { vector&amp;lt;string&amp;gt; ret; for(int i = 2;i&amp;lt;=n;i++){ for(int j = 1;j&amp;lt;i;j++){ if(__gcd(i,j) == 1){ ret.</description></item></channel></rss>