<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jhas's Blog</title><link>https://blog.jhas.site/post/</link><description>Recent content in Posts on Jhas's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Mar 2022 08:35:07 +0800</lastBuildDate><atom:link href="https://blog.jhas.site/post/index.xml" rel="self" type="application/rss+xml"/><item><title>20220302 每日一题 Leetcode564 寻找最近的回文数</title><link>https://blog.jhas.site/p/20220302-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode564-%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%9A%84%E5%9B%9E%E6%96%87%E6%95%B0/</link><pubDate>Wed, 02 Mar 2022 08:35:07 +0800</pubDate><guid>https://blog.jhas.site/p/20220302-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode564-%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%9A%84%E5%9B%9E%E6%96%87%E6%95%B0/</guid><description>564. 寻找最近的回文数 题面 给定一个表示整数的字符串 n ，返回与它最近的回文整数（不包括自身）。如果不止一个，返回较小的那个。
“最近的”定义为两个整数差的绝对值最小。
解析 这题其实不值得hard的难度，整体来说只是代码比较难写，需要分类讨论较多情况而已
首先对于个整数字符串n
我们找出它的大于它的最近回文数与小于它的最近回文数，然后把两个回文数与n的差取绝对值比较即可。
对于大回文数与小回文数，我们首先考虑的是在不对n的上半部分增减数字的情况下构造一个回文数，若这个回文数小于n，则该回文数为小回文数。反之若大于n，则该回文数为大回文数。若等于n则必须增减数字来构造回文数。
首先我们先讨论大回文数的构造：
若要取得大于n的最小回文数，则必是对n的上半部分进行一个 +1 操作(贪心的思想)(因为数字回文所以下半部分不重要)，然后使用上半部分继续构造回文数
同时我们考虑一下进位的情况:
对于 9999 来说 +1 后 变为10099 构造后 10001,为9999的上界回文数。即只需要构造即可，不需要特别在意进位。
然后我们讨论一下小回文数的构造:
与大回文数构造的思想相同,若要取得小于n的最小回文数，则必是对n的上半部分进行一个 -1 操作(贪心的思想)(因为数字回文所以下半部分不重要)，然后使用上半部分继续构造回文数.
我们再来考虑一下进位的情况。这时候我们就需要区分长度奇偶了。
先来讨论长度为偶数，进位后为奇数的情况:
对于100000 来说 -1后变 99000 假如我们直接按上部回文构造的话就会变为 99099,显然 99999 才是100000 的下界回文数，所以我们需要将中间位也变为9，
换句话来说就是检测到头部为0，需要将 len/2 这个位置变为 9
再来讨论长度为奇数，进位后为偶数的情况:
对于 10000 来说 -1 后变为 9900, 构造后变为9999 是正确的答案，所以长度为奇数进位后为偶数的情况是不需要特殊构造的。
解法 时间复杂度:$O(n)$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 class Solution { public: long long int find_up(string n){ auto lln = parse(n); int len = n.</description></item><item><title>20220301 每日一题 Leetcode6 Z字形变换</title><link>https://blog.jhas.site/p/20220301-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode6-z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link><pubDate>Tue, 01 Mar 2022 07:49:37 +0800</pubDate><guid>https://blog.jhas.site/p/20220301-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode6-z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid><description>6. Z 字形变换 题面 将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 &amp;ldquo;PAYPALISHIRING&amp;rdquo; 行数为 3 时，排列如下：
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&amp;ldquo;PAHNAPLSIIGYIR&amp;rdquo;。
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows);
解析 这题解法多样，首先可以二维数组模拟，然后其实可以使用字符串压缩模拟，然后进阶的可以直接计算每一行的字符串然后直接加起来即可
解法一(字符串压缩行模拟) 时间复杂度:$O(n^2)$
空间复杂度:$O(n)$ 设单个字符串空间复杂度为$O(1)$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: string convert(string s, int numRows) { if(numRows == 1) return s; vector&amp;lt;string&amp;gt; ret(numRows,&amp;#34;&amp;#34;); int lc = 0; int add = 1; for(int i = 0;i&amp;lt;s.</description></item><item><title>20220228 每日一题 Leetcode1601 最多可达成的换楼请求数目</title><link>https://blog.jhas.site/p/20220228-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1601-%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/</link><pubDate>Mon, 28 Feb 2022 08:49:52 +0800</pubDate><guid>https://blog.jhas.site/p/20220228-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1601-%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/</guid><description>1601. 最多可达成的换楼请求数目 题面 我们有 n 栋楼，编号从 0 到 n - 1 。每栋楼有若干员工。由于现在是换楼的季节，部分员工想要换一栋楼居住。
给你一个数组 $requests$ ，其中 $requests[i] = [from_i, to_i]$ ，表示一个员工请求从编号为 $from_i$ 的楼搬到编号为 $to_i$ 的楼。
一开始 所有楼都是满的，所以从请求列表中选出的若干个请求是可行的需要满足 每栋楼员工净变化为 0 。意思是每栋楼 离开 的员工数目 等于 该楼 搬入 的员工数数目。比方说 n = 3 且两个员工要离开楼 0 ，一个员工要离开楼 1 ，一个员工要离开楼 2 ，如果该请求列表可行，应该要有两个员工搬入楼 0 ，一个员工搬入楼 1 ，一个员工搬入楼 2 。
请你从原请求列表中选出若干个请求，使得它们是一个可行的请求列表，并返回所有可行列表中最大请求数目。
提示：
$1\le n \le 20$ $1 \le requests.length \le 16$ $requests[i].length == 2$ $0 \le fromi, toi \lt n $ 解析 今天这道题做了好久，想复杂了，其实很简单。。。。</description></item><item><title>20220227 每日一题 Leetcode553 最优除法</title><link>https://blog.jhas.site/p/20220227-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode553-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/</link><pubDate>Sun, 27 Feb 2022 20:58:36 +0800</pubDate><guid>https://blog.jhas.site/p/20220227-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode553-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/</guid><description>553. 最优除法 题面 给定一组正整数，相邻的整数之间将会进行浮点除法操作。例如， [2,3,4] -&amp;gt; 2 / 3 / 4 。
但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。你的表达式不应该含有冗余的括号。
说明:
输入数组的长度在 [1, 10] 之间。 数组中每个元素的大小都在 [2, 1000] 之间。 每个测试用例只有一个最优除法解。 解析 其实这题主要是数学题
针对这一整个数组，若使得数组加括号最大，则是使得被除数最大，除数最小。则显然，在长度大于二的数组中，只需要在第二个位置与最后一个位置加上括号即可。
即有
$ \frac{nums[1]}{nums[2]/nums[3]/nums[4]/&amp;hellip;/nums[n]} $ = $\frac{nums[1]*nums[3]nums[4]&amp;hellip;*nums[n]}{nums[2]}$
此外这题还可以用dp来解，参考leetcode的dp解法，但这道题的数据量太大，用dp解法会爆long long(int64),
leetcode能过是因为他数据量太小了
解法一(数学解法) 时间复杂度:$ O(n) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: string optimalDivision(vector&amp;lt;int&amp;gt;&amp;amp; nums) { string ans; for(int i = 0;i&amp;lt;nums.</description></item><item><title>20220226 每日一题 Leetcode2016 增量元素之间的最大差值</title><link>https://blog.jhas.site/p/20220226-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2016-%E5%A2%9E%E9%87%8F%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/</link><pubDate>Sat, 26 Feb 2022 11:26:17 +0800</pubDate><guid>https://blog.jhas.site/p/20220226-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2016-%E5%A2%9E%E9%87%8F%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/</guid><description>2016. 增量元素之间的最大差值 题面 给你一个下标从 $0$ 开始的整数数组 $nums$ ，该数组的大小为 $n$ ，请你计算 $nums[j] - nums[i]$ 能求得的 最大差值 ，其中 $0 &amp;lt;= i &amp;lt; j &amp;lt; n$ 且 $nums[i] &amp;lt; nums[j]$ 。
返回 最大差值 。如果不存在满足要求的 $i$ 和 $j$ ，返回 $-1$ 。
解析 简单得很，对于每个数，维护其前面数字最小值，然后如果这个最小值比当前数小，则将其减最小数即可
解法 时间复杂度: $O(n)$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public: int maximumDifference(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int pre_min = 1e9+1; int ans = -1; for(int i = 0;i&amp;lt;nums.</description></item><item><title>20220225 每日一题 Leetcode537 复数乘法</title><link>https://blog.jhas.site/p/20220225-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode537-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/</link><pubDate>Fri, 25 Feb 2022 00:12:42 +0800</pubDate><guid>https://blog.jhas.site/p/20220225-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode537-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/</guid><description>537. 复数乘法 题面 复数 可以用字符串表示，遵循 &amp;ldquo;实部+虚部i&amp;rdquo; 的形式，并满足下述条件：
实部 是一个整数，取值范围是 [-100, 100] 虚部 也是一个整数，取值范围是 [-100, 100] i2 == -1 给你两个字符串表示的复数 num1 和 num2 ，请你遵循复数表示形式，返回表示它们乘积的字符串。
解析 标着是中等，但实际只有简单的难度，完全就是语法题，模拟就好了
解法 时间复杂度:$O(n)$ (遍历一次字符串)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public: string complexNumberMultiply(string num1, string num2) { auto n1 = parse(num1); auto n2 = parse(num2); int sb = n1.</description></item><item><title>20220224 每日一题 Leetcode1706 球会落何处</title><link>https://blog.jhas.site/p/20220224-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1706-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</link><pubDate>Thu, 24 Feb 2022 20:14:15 +0800</pubDate><guid>https://blog.jhas.site/p/20220224-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1706-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</guid><description>1706. 球会落何处 题面 用一个大小为 $m * n$ 的二维网格 $grid$ 表示一个箱子。你有 $n$ 颗球。箱子的顶部和底部都是开着的。
箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。
将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 &amp;ldquo;V&amp;rdquo; 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。
返回一个大小为 n 的数组 answer ，其中 $answer[i]$ 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 $-1$ 。
解析 显然对于每一个下落的球，我们只需要模拟即可.
对于每一个球,如果他现在的位置在$(x,y)$ 这格的顶部
如果该格为'/' 则其左边格$(x,y-1)$必须为也为'/' 才能落到$(x+1,y-1)$ 处 如果该格为'' 则其左边格$(x,y+1)$必须为也为'' 才能落到$(x+1,y+1)$ 处 否则其被拦下 我们可以用递归来得到每一个球最后下落到的位置,只需在每个(x,y) 判断是否能够继续下落，可以就继续判断下个(x,y)否则返回-1,递归终止条件为: $x == m$
解法 时间复杂度:$ O(n*m) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: int n,m; vector&amp;lt;int&amp;gt; findBall(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { vector&amp;lt;int&amp;gt; ret; n = grid[0].</description></item><item><title>20220223 每日一题 Leetcode917 仅仅反转字母</title><link>https://blog.jhas.site/p/20220223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode917-%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/</link><pubDate>Wed, 23 Feb 2022 09:30:22 +0800</pubDate><guid>https://blog.jhas.site/p/20220223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode917-%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/</guid><description>917. 仅仅反转字母 题面 给你一个字符串 s ，根据下述规则反转字符串：
所有非英文字母保留在原有位置。 所有英文字母（小写或大写）位置反转。 返回反转后的 s 。
解析 按题面双指针模拟即可。
有点像快排里的交换(部分像)。
每个用了的指针向前/向后一位,碰到不是字母的指针也移动.
解法 时间复杂度:$ O(n) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public: string reverseOnlyLetters(string s) { int l=0,r = s.size(); while(l&amp;lt;r){ if((s[l]&amp;lt;&amp;#39;A&amp;#39;||s[l]&amp;gt;&amp;#39;Z&amp;#39;)&amp;amp;&amp;amp;(s[l]&amp;lt;&amp;#39;a&amp;#39;||s[l]&amp;gt;&amp;#39;z&amp;#39;)){ l++; } else if((s[r]&amp;lt;&amp;#39;A&amp;#39;||s[r]&amp;gt;&amp;#39;Z&amp;#39;)&amp;amp;&amp;amp;(s[r]&amp;lt;&amp;#39;a&amp;#39;||s[r]&amp;gt;&amp;#39;z&amp;#39;)){ r--; }else{ swap(s[l++], s[r--]); } } return s; } };</description></item><item><title>20220222 每日一题 Leetcode1994 好子集的数目</title><link>https://blog.jhas.site/p/20220222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1994-%E5%A5%BD%E5%AD%90%E9%9B%86%E7%9A%84%E6%95%B0%E7%9B%AE/</link><pubDate>Tue, 22 Feb 2022 14:47:07 +0800</pubDate><guid>https://blog.jhas.site/p/20220222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1994-%E5%A5%BD%E5%AD%90%E9%9B%86%E7%9A%84%E6%95%B0%E7%9B%AE/</guid><description>1994. 好子集的数目 题面 给你一个整数数组 $nums$ 。如果 $nums$ 的一个子集中，所有元素的乘积可以表示为一个或多个 互不相同的质数 的乘积，那么我们称它为 好子集 。
比方说，如果 $nums$ = $[1, 2, 3, 4]$ ： $[2, 3]$ ，$[1, 2, 3]$ 和 $[1, 3]$ 是 好 子集，乘积分别为 $6 = 23$ ，$6 = 23$ 和 $3 = 3$ 。 $[1, 4]$ 和 $[4]$ 不是 好 子集，因为乘积分别为 $4 = 22$ 和 $4 = 22$ 。 请你返回 $nums$ 中不同的 好 子集的数目对 $10^9 + 7$ 取余 的结果。
$nums$ 中的 子集 是通过删除 $nums$ 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。</description></item><item><title>20220221 每日一题 Leetcode838 推多米诺</title><link>https://blog.jhas.site/p/20220221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode838-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/</link><pubDate>Mon, 21 Feb 2022 11:12:29 +0800</pubDate><guid>https://blog.jhas.site/p/20220221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode838-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/</guid><description>838. 推多米诺 题面 $n$ 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。
每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。
如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。
就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。
给你一个字符串 $dominoes$ 表示这一行多米诺骨牌的初始状态，其中：
$dominoes[i]$ = &amp;lsquo;L&amp;rsquo;，表示第 $i$ 张多米诺骨牌被推向左侧，
$dominoes[i]$ = &amp;lsquo;R&amp;rsquo;，表示第 $i$ 张多米诺骨牌被推向右侧，
$dominoes[i]$ = &amp;lsquo;.'，表示没有推动第 $i$ 张多米诺骨牌。
返回表示最终状态的字符串。
解析 本题有两种思路：
bfs搜索 双指针模拟 bfs搜索 简单说一下bfs搜索的思路，对于每一个推倒的多米诺，必然会引起连锁反应引起其它多米诺倒下。维护一个队列。队列里元素为$(i)$ 再开一个数组记录当前多米诺的状态:访问?未访问。
对于每个倒下的多米诺，其一定不会对已访问的多米诺产生影响，对于一开始已经倒下的多米诺记为已访问。同时对于每次访问的多米诺，仅仅只在其被取出为队头时才记录为访问。
再次对于每个倒下的多米诺，其影响一定是左边或右边，修改其对应影响的未访问的多米诺的状态，当一个多米诺同时被两边访问(未被访问但已经为L或R)时，该多米诺为直立。
以上情况直到队列空为止
双指针模拟 对于每一个倒下的多米诺都会影响一个一个区间。只要用双指针模拟这个区间即可
解法 双指针模拟
时间复杂度: $O(n)$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public: string pushDominoes(string dominoes) { int l = 0; for(int i = 0;i&amp;lt;dominoes.</description></item><item><title>20220220 每日一题 Leetcode717 1比特与2比特字符</title><link>https://blog.jhas.site/p/20220220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode717-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/</link><pubDate>Sun, 20 Feb 2022 10:55:44 +0800</pubDate><guid>https://blog.jhas.site/p/20220220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode717-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/</guid><description>717. 1比特与2比特字符 题面 有两种特殊字符：
第一种字符可以用一个比特 0 来表示
第二种字符可以用两个比特(10 或 11)来表示
给定一个以 0 结尾的二进制数组 bits ，如果最后一个字符必须是一位字符，则返回 true 。
解析 简简单单模拟即可
解法 时间复杂度: $ O(n) $
1 2 3 4 5 6 7 8 9 10 class Solution { public: bool isOneBitCharacter(vector&amp;lt;int&amp;gt;&amp;amp; bits) { for(int i = 0;i&amp;lt;bits.size();i++){ if(i == bits.size() - 1) return true; if(bits[i] == 1) i++; } return false; } };</description></item><item><title>20220219 每日一题 Leetcode969 煎饼排序</title><link>https://blog.jhas.site/p/20220219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode969-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 19 Feb 2022 09:21:44 +0800</pubDate><guid>https://blog.jhas.site/p/20220219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode969-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/</guid><description>969. 煎饼排序 题面 给你一个整数数组 $arr$ ，请使用 煎饼翻转 完成对数组的排序。
一次煎饼翻转的执行过程如下：
选择一个整数 $k$ ，$1 \le k \le arr.length$ 反转子数组 $arr[0&amp;hellip;k-1]$（下标从 0 开始） 例如，$arr = [3,2,1,4]$ ，选择 $k = 3$ 进行一次煎饼翻转，反转子数组 $[3,2,1]$ ，得到 $arr = [1,2,3,4]$ 。
以数组形式返回能使 $arr$ 有序的煎饼翻转操作所对应的 $k$ 值序列。任何将数组排序且翻转次数在 $10 * arr.length$ 范围内的有效答案都将被判断为正确。
解析 考虑一下每次都将某个下标翻到第一位，然后将它再翻到它对应的位置，操作次数只需 $2 * arr.length$即可
又有如果我们要让每一次翻面不会搞乱前面的翻面，则我们应该从右往左翻。枚举每一个值即可。
代码 时间复杂度:$ O(n^2) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public: vector&amp;lt;int&amp;gt; pancakeSort(vector&amp;lt;int&amp;gt;&amp;amp; arr) { int n = arr.</description></item><item><title>20220218 每日一题 Leetcode1791 找出星型图的中心节点</title><link>https://blog.jhas.site/p/20220218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1791-%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9/</link><pubDate>Fri, 18 Feb 2022 08:37:24 +0800</pubDate><guid>https://blog.jhas.site/p/20220218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1791-%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9/</guid><description>1791. 找出星型图的中心节点 题面 有一个无向的 星型 图，由 n 个编号从 1 到 n 的节点组成。星型图有一个 中心 节点，并且恰有 n - 1 条边将中心节点与其他每个节点连接起来。
给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示在节点 ui 和 vi 之间存在一条边。请你找出并返回 edges 所表示星型图的中心节点。
解析 这题太白给了，恰有n-1条边代表每个edge数组内都有一个相等的值
则只需要比较第一第二个数组即可
做法 时间复杂度: $ O(1) $
1 2 3 4 5 6 7 8 9 class Solution { public: int findCenter(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; edges) { if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]){ return edges[0][0]; } return edges[0][1]; } };</description></item><item><title>20220217 每日一题 Leetcode688 骑士在棋盘上的概率</title><link>https://blog.jhas.site/p/20220217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</link><pubDate>Thu, 17 Feb 2022 00:05:45 +0800</pubDate><guid>https://blog.jhas.site/p/20220217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</guid><description>688. 骑士在棋盘上的概率 题面 在一个 $n * n$ 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 $k$ 次移动。行和列是 从 $0$ 开始 的，所以左上单元格是 $(0,0)$ ，右下单元格是 $(n - 1, n - 1)$ 。
象棋骑士有$8$种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。
每次骑士要移动时，它都会随机从$8$种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。
骑士继续移动，直到它走了 $k$ 步或离开了棋盘。
返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。
解析 由于对于每一次的移动，其到某格的概率为该格其八个方向到该格的概率，则设dp方程为 $$ dp[0][row][column] = 1\ dp[k][i][j] = \sum_{n=0}^7 dp[k-1][i+x_n][j+y_n] * \frac{1}{8}\ $$ 其中 $$ x[8] = {-2,-2,-1,-1,1,1,2,2};\ y[8] = {-1,1,2,-2,2,-2,-1,1};\ $$ 最后统计$dp[k]$中所有值的和，即为最后留在棋盘上的概率
同时由于每一层的dp仅依赖于上一层的dp，故可以用奇偶性来压缩数组大小
代码 时间复杂度:$ O(k*n^2) $
空间复杂度:$ O(n^2) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public: double dp[2][25][25]; int tx[8] = {-2,-2,-1,-1,1,1,2,2}; int ty[8] = {-1,1,2,-2,2,-2,-1,1}; double knightProbability(int n, int k, int row, int column) { dp[0][row][column] = 1.</description></item><item><title>20220216 每日一题 Leetcode1719 重构一颗树的方案数</title><link>https://blog.jhas.site/p/20220216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1719-%E9%87%8D%E6%9E%84%E4%B8%80%E9%A2%97%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</link><pubDate>Wed, 16 Feb 2022 10:18:20 +0800</pubDate><guid>https://blog.jhas.site/p/20220216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1719-%E9%87%8D%E6%9E%84%E4%B8%80%E9%A2%97%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</guid><description>1719. 重构一棵树的方案数 今天这道题前前后后看了两小时，最后忍不住看答案了
题面 给你一个数组 $pairs$ ，其中 $pairs[i] = [x_i, y_i]$ ，并且满足：
$pairs$ 中没有重复元素 $xi &amp;lt; yi$ 令 $ways$ 为满足下面条件的有根树的方案数：
树所包含的所有节点值都在 $pairs$ 中。 一个数对 $[xi, yi]$ 出现在 $pairs$ 中 当且仅当 $x_i$ 是 $y_i$ 的祖先或者 $y_i$ 是 $x_i$ 的祖先。 注意：构造出来的树不一定是二叉树。 两棵树被视为不同的方案当存在至少一个节点在两棵树中有不同的父节点。 请你返回：
如果 $ways == 0$，返回0。 如果 $ways == 1$，返回1。 如果 $ways &amp;gt; 1 $ ，返回 2 。
一棵 有根树 指的是只有一个根节点的树，所有边都是从根往外的方向。
我们称从根到一个节点路径上的任意一个节点（除去节点本身）都是该节点的 祖先 。根节点没有祖先。
解析 注意题面的当且仅当，故有以下结论
每一个能够成为根节点的值，必然与其它节点的值构成一个$pair$ 对于该树以及其子树，每一个节点的父节点的度都 大于或等于其子节点的度 每一个子节点的邻接节点集都为父节点的子集 则对于重构一颗树，我们可以先确定其根节点的值，然后枚举剩下的节点，确定其父节点的值，然后检查父节点值成立</description></item><item><title>20220215 每日一题 Leetcode1380 矩阵中的幸运数</title><link>https://blog.jhas.site/p/20220215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1380-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0/</link><pubDate>Tue, 15 Feb 2022 01:37:58 +0800</pubDate><guid>https://blog.jhas.site/p/20220215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1380-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0/</guid><description>1380. 矩阵中的幸运数 题面 给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。
幸运数是指矩阵中满足同时下列两个条件的元素：
在同一行的所有元素中最小 在同一列的所有元素中最大
解析 模拟就完事了
代码 时间复杂度: $ O(nm) $
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public: bool r[51],c[51]; vector&amp;lt;int&amp;gt; luckyNumbers (vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) { int n = matrix.size(); int m = matrix[0].</description></item><item><title>20220214 每日一题 Leetcode540 有序数组中的单一元素</title><link>https://blog.jhas.site/p/20220214-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/</link><pubDate>Mon, 14 Feb 2022 07:48:38 +0800</pubDate><guid>https://blog.jhas.site/p/20220214-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/</guid><description>540. 有序数组中的单一元素 题面 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。
请你找出并返回只出现一次的那个数。
你设计的解决方案必须满足 $O(\log n)$ 时间复杂度和 $O(1)$ 空间复杂度。
呜呜呜，破防了。我就是这个单一元素吧QAQ
解析 如果不在意题的$ O(\log n) $特殊要求的话，其实可以直接对整个数组异或和即可得到这单一元素(成双成对的元素都各自领走自己的另一半出去约会去了，就剩这单一元素QAQ)
回到题面上，按着题面的$O(\log n)$要求的话则是需要用到二分。属于是一道非常经典的二段性分析的题。
假设单一元素的下标为 $ k $ , 则有下列条件
设$ \forall i \in N, 2i &amp;lt; k $
那么有 $ nums[2i] == nums[2i+1] $
且对于$ \forall i \in N, 2i &amp;gt; k $
有$ nums[2i] == nums[2i-1] $
可以说$nums[k]$干扰了成对数组的序列，使其的规律改变，使数组的性质变成了二段。
至此其实已经分析完毕了一种做法:对偶数下标进行二分。
为了减少代码量，我们将偶数做法扩展到自然数做法。
设$ \forall i \in N , i &amp;lt; k$
若$i$为奇数则$nums[i] == nums[i-1]$
若$i$为偶数则$ nums[i] == nums[i+1] $</description></item><item><title>20220213 Leetcode280周赛</title><link>https://blog.jhas.site/p/20220213-leetcode280%E5%91%A8%E8%B5%9B/</link><pubDate>Sun, 13 Feb 2022 12:14:10 +0800</pubDate><guid>https://blog.jhas.site/p/20220213-leetcode280%E5%91%A8%E8%B5%9B/</guid><description>Leetcode第280场周赛 6004. 得到 0 的操作数 题面 给你两个 非负 整数 num1 和 num2 。
每一步 操作 中，如果 num1 &amp;gt;= num2 ，你必须用 num1 减 num2 ；否则，你必须用 num2 减 num1 。
解析 没啥好说的，模拟就完事了。更相减损术
解法 1 2 3 4 5 6 7 8 class Solution { public: int countOperations(int num1, int num2) { if(num1 == 0 || num2 == 0) return 0; if(num1&amp;gt;=num2) return 1 + countOperations(num2,num1-num2); return 1 + countOperations(num1,num2-num1); } }; 6005.</description></item><item><title>20220213 每日一题 Leetcode1189 气球的最大数量</title><link>https://blog.jhas.site/p/20220213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1189-%E6%B0%94%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</link><pubDate>Sat, 12 Feb 2022 23:06:52 +0800</pubDate><guid>https://blog.jhas.site/p/20220213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1189-%E6%B0%94%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/</guid><description>1189. “气球” 的最大数量 题面 给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 &amp;ldquo;balloon&amp;rdquo;（气球）。
字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 &amp;ldquo;balloon&amp;rdquo;。
解析 超级白给题,直接记录每一个小写字母大小，然后对应字母数量除以每个字母数量取最小值即可。
解法 时间复杂度:$O(n)$
1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public: int maxNumberOfBalloons(string text) { int st[26] = {}; for(auto &amp;amp; c : text){ st[c - &amp;#39;a&amp;#39;]++; } st[&amp;#39;l&amp;#39; - &amp;#39;a&amp;#39;]/=2; st[&amp;#39;o&amp;#39; - &amp;#39;a&amp;#39;]/=2; return min(min(st[&amp;#39;b&amp;#39; - &amp;#39;a&amp;#39;],min(st[&amp;#39;l&amp;#39; - &amp;#39;a&amp;#39;],st[&amp;#39;o&amp;#39; - &amp;#39;a&amp;#39;])),min(st[0],st[&amp;#39;n&amp;#39; - &amp;#39;a&amp;#39;])); } }; 如果将balloon扩展到任意字符串，则为</description></item><item><title>20220212 每日一题 Leetcode1020 飞地的数量</title><link>https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/</link><pubDate>Sat, 12 Feb 2022 09:50:17 +0800</pubDate><guid>https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/</guid><description>1020. 飞地的数量 题面 给你一个大小为 $m * n$ 的二进制矩阵 $grid$ ，其中 $0$ 表示一个海洋单元格、$1$ 表示一个陆地单元格。
一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 $grid$ 的边界。
返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。
解析 题目非常白给，求无法 在任意次数的移动中离开网格边界的陆地单元格的数量，也即不与边界有相联的联通块，这时我们有两种思路：
从边界块出发，看看边界块延伸的最长块 从每一块陆地块出发，看看是否能到边界 两种情况正好对应了两种解法:
多源dfs/bfs 并查集 解法一 dfs和bfs在这题的情况下效果是一样的，首先记录下每一个边界陆地块，然后从边界陆地块出发搜索陆地块，如果可以碰到则把碰到的块1变为0，最后遍历grid标记其值为1的数量。
由于我们每次碰到后都会把1标为0，所以每一个块实际入 栈/队列 次数为 $n*m$
所以时间复杂度:$O(mn)$
代码如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { int n = grid.</description></item><item><title>20220211 每日一题 Leetcode1984 学生分数的最小差值</title><link>https://blog.jhas.site/p/20220211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1984-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</link><pubDate>Fri, 11 Feb 2022 12:56:58 +0800</pubDate><guid>https://blog.jhas.site/p/20220211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1984-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</guid><description>1984. 学生分数的最小差值 题面 给你一个 下标从 0 开始 的整数数组 $nums$ ，其中 $nums[i]$ 表示第 $i$ 名学生的分数。另给你一个整数 $k$ 。
从数组中选出任意 $k$ 名学生的分数，使这 $k$ 个分数间 最高分 和 最低分 的 差值 达到 最小化 。
返回可能的 最小差值 。
解析 若使$k$名学生的分数差值达到最小化，从$nums$取$k$个数，如果这$k$个数正好是最大最小数差值最小化，则$nums$必无其它数在这$k$个数之间。显然若使从$nums$取出任意$i$都满足从$i$后取$k$个数差值最小化，则数组必然有序。
解法 将数组排序然后枚举$i$滑动窗口即可
时间复杂度: $O( n \log n)$
1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public: int minimumDifference(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { int i,n = nums.size(),ans; sort(nums.begin(),nums.end()); ans = 100010; for(i = k - 1;i&amp;lt;n;i++){ ans = min(ans,nums[i] - nums[i - k + 1]); } return ans; } };</description></item><item><title>二分范围查找笔记</title><link>https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 10 Feb 2022 12:07:04 +0800</pubDate><guid>https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/</guid><description>二分搜索 简述 二分搜索是一种效率较高的查找方法，用于在有序(二段)数组内查找一个特定数。得益于有序(二段)数组的性质，每一次查找可以筛除一段数量大于一的数段(常见为$\frac{n}{2} $),故能在$ O(\log n) $的时间复杂度内找到对应答案。
二分的本质是二段性而不是单调性
应用 二分通常被用于一个有序数组查找一个数或一个位置，这个数通常是一个最小或最大值/位置(边界位置)。
常见二分通常有两种：
整数二分 浮点二分 整数二分 整数二分通常查找一个范围的上界或下界
比如说不超过/不低于某个数最大/最小的数的位置与其值。
总的来说，查找的区间可以被分为两个部分，一个部分满足条件，另一部分不满足条件，答案则在两部分的交点。
浮点二分 通常是函数求根、开方等问题，比较简单，while循环终止条件是精度e，更新时l和r都更新为mid即可。
基本代码 整数二分有两种，一种是寻找上界(即寻找不符合性质的最后一个点)，一种是下界(即寻找符合性质的第一个点)
整数二分上界 1 2 3 4 5 6 7 8 9 10 int bsearch(int l, int r) { while (l &amp;lt; r) { int mid = l + r + 1 &amp;gt;&amp;gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 整数二分下界 1 2 3 4 5 6 7 8 9 10 int bsearch(int l, int r) { while (l &amp;lt; r) { int mid = l + r &amp;gt;&amp;gt; 1; if (check(mid)) r = mid; else l = mid + 1; } return l; } 浮点二分则比较单调，通常是函数求根、开方等问题</description></item><item><title>20220210 每日一题 Leetcode1447 最简分数</title><link>https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/</link><pubDate>Thu, 10 Feb 2022 08:40:23 +0800</pubDate><guid>https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/</guid><description>1447. 最简分数 题面 给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。
解析 非常简单的暴力数论题，对于任意 $ i$ $j $ 来说，满足 $ 0&amp;lt; j/i &amp;lt;1 $ 即满足 $ j &amp;lt; i $ ,考虑到 $ 1\leq n \leq 100 $ 则只需暴力枚举每一个 $i$,$j$ 即可得出答案，对于任意$i$,$j$ ，满足$ j/i $为最简分数，即两数不可同时除以任意数且结果为整数，即两数互质，等价于 $ gcd(i,j) = 1 $
解法 时间复杂度:$ O(n^2\log n) $
代码如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public: vector&amp;lt;string&amp;gt; simplifiedFractions(int n) { vector&amp;lt;string&amp;gt; ret; for(int i = 2;i&amp;lt;=n;i++){ for(int j = 1;j&amp;lt;i;j++){ if(__gcd(i,j) == 1){ ret.</description></item><item><title>20220209 每日一题 Leetcode2006 差的绝对值为K的数对数目</title><link>https://blog.jhas.site/p/20220209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2006-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BAk%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/</link><pubDate>Wed, 09 Feb 2022 20:42:21 +0800</pubDate><guid>https://blog.jhas.site/p/20220209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2006-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BAk%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/</guid><description>2006. 差的绝对值为 K 的数对数目 题面 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i &amp;lt; j 且 |nums[i] - nums[j]| == k 。
|x| 的值定义为：
如果 x &amp;gt;= 0 ，那么值为 x 。 如果 x &amp;lt; 0 ，那么值为 -x 。
解析 题目非常白给，照着题目意思顺下去分析即可
对于 $$ |nums[i] - nums[j]| = k $$ 拆解后有两种可能 $$ nums[i] = k + nums[j] $$ 与 $$ nums[i] = nums[j] - k $$ 既对于任意 $ j $ 只需要统计到 $ i&amp;lt;j $ 的数目即可</description></item></channel></rss>