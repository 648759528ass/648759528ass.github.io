[{"content":"前提条件：\n准备好Quartus与SchoolMIPS的文件，并且安装好mipssdk , 保证codescape for Eclipse 可以运行\n迁移schoolMIPS至Quartus中 创建新项目 在Quartus中选择 File -\u0026gt; New Project Wizard，然后一路向下,\n如图所示文件名可以随便，此处表示我的工作目录为guide, 以后如果表示工作目录将使用 guide/* 来表示，如果表示schoolMIPS(github上克隆的仓库)将用schoolMIPS/*表示。\n然后接着向下，可以不用管选择的是什么实体机，反正不会用到。如果担心的话可以和我选一样的\n如图所示创建成功\n创建顶层文件 File -\u0026gt; New -\u0026gt; Verilog HDL File 创建一个 verilog新文件\n然后打开schoolMIPS/src/sm_cpu.v 将module sm_cpu 复制到新创建的verilog文件中，一个module指的是从module sm_cpu 到 endmodule 下面一行(注意一定要下面一行)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  module sm_cpu ( input clk, // clock  input rst_n, // reset  input [ 4:0] regAddr, // debug access reg address  output [31:0] regData, // debug access reg data  output [31:0] imAddr, // instruction memory address  input [31:0] imData // instruction memory data ); //control wires  wire pcSrc; wire regDst; wire regWrite; wire aluSrc; wire aluZero; wire [ 2:0] aluControl; //program counter  wire [31:0] pc; wire [31:0] pcBranch; wire [31:0] pcNext = pc + 1; wire [31:0] pc_new = ~pcSrc ? pcNext : pcBranch; sm_register r_pc(clk ,rst_n, pc_new, pc); //program memory access  assign imAddr = pc; wire [31:0] instr = imData; //debug register access  wire [31:0] rd0; assign regData = (regAddr != 0) ? rd0 : pc; //register file  wire [ 4:0] a3 = regDst ? instr[15:11] : instr[20:16]; wire [31:0] rd1; wire [31:0] rd2; wire [31:0] wd3; sm_register_file rf ( .clk ( clk ), .a0 ( regAddr ), .a1 ( instr[25:21] ), .a2 ( instr[20:16] ), .a3 ( a3 ), .rd0 ( rd0 ), .rd1 ( rd1 ), .rd2 ( rd2 ), .wd3 ( wd3 ), .we3 ( regWrite ) ); //sign extension  wire [31:0] signImm = { {16 { instr[15] }}, instr[15:0] }; assign pcBranch = pcNext + signImm; //alu  wire [31:0] srcB = aluSrc ? signImm : rd2; sm_alu alu ( .srcA ( rd1 ), .srcB ( srcB ), .oper ( aluControl ), .shift ( instr[10:6 ] ), .zero ( aluZero ), .result ( wd3 ) ); //control  sm_control sm_control ( .cmdOper ( instr[31:26] ), .cmdFunk ( instr[ 5:0 ] ), .aluZero ( aluZero ), .pcSrc ( pcSrc ), .regDst ( regDst ), .regWrite ( regWrite ), .aluSrc ( aluSrc ), .aluControl ( aluControl ) ); endmodule   大概是这么多\n接下来我们进行一些小改造,把输入输出的imAddr和imData删掉,同时修改模块名,模块头变为\n1 2 3 4 5 6 7  module top ( input clk, // clock  input rst_n, // reset  input [ 4:0] regAddr, // debug access reg address  output [31:0] regData // debug access reg data );   然后把program memory access 部分修改为\n1 2  wire [31:0] instr; sm_rom reset_rom(pc,instr);   然后保存为 top.v ,在左边选择它，右键 set as top-level entity，此步完成\n最后的代码是这样的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82  module top ( input clk, // clock  input rst_n, // reset  input [ 4:0] regAddr, // debug access reg address  output [31:0] regData // debug access reg data ); //control wires  wire pcSrc; wire regDst; wire regWrite; wire aluSrc; wire aluZero; wire [ 2:0] aluControl; //program counter  wire [31:0] pc; wire [31:0] pcBranch; wire [31:0] pcNext = pc + 1; wire [31:0] pc_new = ~pcSrc ? pcNext : pcBranch; sm_register r_pc(clk ,rst_n, pc_new, pc); //program memory access \twire [31:0] instr; sm_rom reset_rom(pc,instr); //debug register access  wire [31:0] rd0; assign regData = (regAddr != 0) ? rd0 : pc; //register file  wire [ 4:0] a3 = regDst ? instr[15:11] : instr[20:16]; wire [31:0] rd1; wire [31:0] rd2; wire [31:0] wd3; sm_register_file rf ( .clk ( clk ), .a0 ( regAddr ), .a1 ( instr[25:21] ), .a2 ( instr[20:16] ), .a3 ( a3 ), .rd0 ( rd0 ), .rd1 ( rd1 ), .rd2 ( rd2 ), .wd3 ( wd3 ), .we3 ( regWrite ) ); //sign extension  wire [31:0] signImm = { {16 { instr[15] }}, instr[15:0] }; assign pcBranch = pcNext + signImm; //alu  wire [31:0] srcB = aluSrc ? signImm : rd2; sm_alu alu ( .srcA ( rd1 ), .srcB ( srcB ), .oper ( aluControl ), .shift ( instr[10:6 ] ), .zero ( aluZero ), .result ( wd3 ) ); //control  sm_control sm_control ( .cmdOper ( instr[31:26] ), .cmdFunk ( instr[ 5:0 ] ), .aluZero ( aluZero ), .pcSrc ( pcSrc ), .regDst ( regDst ), .regWrite ( regWrite ), .aluSrc ( aluSrc ), .aluControl ( aluControl ) ); endmodule   一点小知识 我们需要补充一些verilog的小知识\n module我们可以类比为一个类 wire指的是一条实际的电路连线 input 与 output指的是输入输出，它们都需要提供一个外部连线 模块名 名字(wire wire) 指的是实例化一个模块，比如sm_register r_pc(clk ,rst_n, pc_new, pc);  基于上述四点，我们可以发现我们如果想启动sm_cpu,还需要sm_register ,rom,sm_register_file,sm_alu,sm_control五个模块\nsm_register模块 File -\u0026gt; New -\u0026gt; Verilog HDL File 创建一个 verilog新文件\n然后打开schoolMIPS/src/sm_register.v ，复制module sm_register 的内容进去\n保存为register.v\nrom模块 File -\u0026gt; New -\u0026gt; Verilog HDL File 创建一个 verilog新文件\n然后打开schoolMIPS/src/sm_rom.v ，复制module sm_rom 的内容进去\n保存为rom.v\n在guide/ 下创建一个 program.hex的空白新文件\nsm_register_file模块 File -\u0026gt; New -\u0026gt; Verilog HDL File 创建一个 verilog 新文件\n然后打开schoolMIPS/src/sm_cpu.v ，复制sm_register_file 的内容进去\n保存为 register_file.v\nsm_cpu.vh 直接把 schoolMIPS/src/sm_cpu.vh 复制到 guide/ 下\n点到左边的files右键 增加文件\n调整到other sources file 选择 sm_cpu.vh\n然后apply把它添加进去\nsm_alu 模块 File -\u0026gt; New -\u0026gt; Verilog HDL File 创建一个 verilog 新文件\n然后打开schoolMIPS/src/sm_cpu.v ，复制module sm_alu 的内容进去\n注意在首行加入 ```include \u0026ldquo;sm_cpu.vh\u0026rdquo;``\n保存为alu.v\nsm_control模块 File -\u0026gt; New -\u0026gt; Verilog HDL File 创建一个 verilog 新文件\n然后打开schoolMIPS/src/sm_cpu.v ，复制module sm_alu 的内容进去\n同样注意在首行加入 ```include \u0026ldquo;sm_cpu.vh\u0026rdquo;``\n保存为control.v\n至此，五模块完成\n验证迁移是否完成 跑完后是这样的则为成功\n程序验证 编写程序 启动codescape for Eclipse\nFile -\u0026gt; new -\u0026gt; C Project\n随便写个项目名\n下面的配置如图\n注意一定要选择MTI GNU GCC\n然后创建一个makefile文件\n把下面的内容贴进去\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  CC=mips-mti-elf-gcc LD=mips-mti-elf-gcc OD=mips-mti-elf-objdump OC=mips-mti-elf-objcopy SZ=mips-mti-elf-size CFLAGS= -nostdlib -EL -march=mips32 LDFLAGS = -nostdlib -EL -march=mips32 -T program.ld ASOURCES=\\ main.S AOBJECTS=$(ASOURCES:.S=.o) .S.o: $(CC) -c $(CFLAGS) $\u0026lt; -o $@ .PHONY: clean sim all: build size disasm build: program.elf disasm: program.dis program.elf:$(AOBJECTS) $(LD) $(LDFLAGS) $(AOBJECTS) -o program.elf program.dis:program.elf $(OD) -M no-aliases -Dz program.elf \u0026gt; program.dis size:program.elf $(SZ) program.elf board: program.hex rm -f ../../board/program/program.hex cp ./program.hex ../../board/program clean: rm -rf sim rm -f *.o rm -f program.elf rm -f program.map rm -f program.dis rm -f program.hex rm -f program.rec   然后创建一个program.ld文件,把下面的内容丢进去\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OUTPUT_ARCH(mips) hwreset = 0x0; ENTRY(hwreset) SECTIONS { .text = .; /DISCARD/ : { *(.MIPS.abiflags) *(.reginfo) *(.gnu.attributes) } }   然后创建一个main.S,开始编写代码\n未经我们扩展的schoolMIPS提供了 addiu, beq, lui ,bne, addu ,or, srl ,sltu ,subu 九个指令使用，\n我们写一个简易计数器\n1 2 3 4  .text counter: addiu $v0,$v0,1 beq $0,$0,counter   选择project -\u0026gt; build all\n完成后能看到 program.dis 文件，这是我们需要的东西\n至此，程序编写完毕\n系统验证 打开 program.hex，把刚刚编译出来的机器指令复制进去\n保存，启动编译\n如果刚刚的验证成功，编译也不会出什么问题\n编译成功后，选择File -\u0026gt; new -\u0026gt; University Program VWF 创建波形文件\n双击该区域选择输入输出\n选成我这样的\n把中间两个调整成16进制会好看点\n点击clk选择时钟信号\n个人比较喜欢50ns 和 25ns offset\n点击rst_n ，调整成1\n接下来调整regAddr的数值，这步比较关键,该数值影响regData的显示，regAddr如果是00则为PC的数值，其它则为寄存器编号，此处参考mips寄存器\n我们先调整为02，点击regAddr ，选择红圈内容,然后调整为02\n都调完后开始模拟\nsimulation -\u0026gt; Run Functional Simulation\n一般需要保存，不要修改默认位置!!!!!!(如果是计组课上留下的Quartus,这点非常重要)\n出结果，可以看到regAddr递增，程序正常运行\n把regAddr调成00，看一下结果\n分析可知，在上升沿时，程序执行，然后在PC为1时执行跳转命令PC = 0，无限重复该过程。\n至此，Quartus启动SchoolMIPS完成\n后记 本实验非常感谢我可爱的女朋友的陪伴\n看到各位哀声叹气我十分难过，仅以此贡献自己微薄之力。\n看完全文你会发现这篇教程只讲如何Quartus启动schoolMIPS，因为指令扩充还在做(要陪女朋友的)。\n这篇东西应该会首先发在朋友圈，如果各位对指令扩充有需求的话，欢迎朋友圈点赞催更，点越多做越快吧.\n","date":"2023-01-01T09:49:20+08:00","permalink":"https://blog.jhas.site/p/a-new-year-gift-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8quartus%E5%90%AF%E5%8A%A8schoolmips/","title":"A new year gift - 如何使用Quartus启动schoolMIPS"},{"content":"Cpp部分 c++内存分配 cpp共有四种内存分配\n malloc(unsigned int size) 申请一个长度为size的连续空间 calloc(unsigned int num, unsigned int size) 申请一个num * size 的连续内存空间且自动初始化内存空间为 0 realloc(void *ptr, unsigned int size) 调整ptr所指向的空间的大小，若p之后的空间有足够的大小则在p后空间追加，否则申请新空间并将原空间数据拷贝至新空间. new  其中 malloc 都不会初始化内存空间，new会自动计算需要需要分配的空间，调用类构造函数初始化类\nc++中，vector的push-back与emplace-back的区别 push_back 在push对象时，需要提供一个已构造好的对象。\nemplace_back 在push时只需要提供对象构造的参数，使用in-place construction 直接在指定位置生成对象 ，可以比起push_back减少一次构造和析构.\nc++，什么是左值，右值，左值引用，右值引用 左值：指一个指向特定内存的具名值，有一个相对稳定的内存地址\n右值：通常是指向不指向稳定对象的匿名值，它的生命周期很短，通常是暂时性的\n可以通过\u0026amp;符号来判断左值和右值\n左值引用：一种CPP语法糖，可以让一个左值具有一个别名，减少指针的使用\n右值引用：右值引用是一种捕获右值的方法且只能捕获右值的方法，可以延长右值的生命周期\n数据库部分 mysql物理存储索引是按什么分类的，有哪些。按数据结构来分类索引有哪些 mysql物理存储索引按照伴随索引存放的数据的类型来分析，有聚簇索引(主键索引)和二级索引两种，区别在于聚簇索引的叶子节点存放的是完整的数据，二级索引的叶子节点存放的是数据的主键。\n当我们在查询时使用了二级索引，如果查询的数据能在二级索引里查询的到，则不需要到聚簇索引中进行再次查找(回表)\n按数据结构来分类，索引有 B-tree B+tree hash 全文索引等四种常见索引\n为什么Innodb使用B+Tree B+Tree是由BTree演变而来的一种数据结构。\nB 树是一个多叉树，B 树的每一个节点最多可以包括 M 个子节点，M 称为 B 树的阶。\n在M为2是则B树退化为二叉树，我们可知，在树节点数量一定时，每一层可存储节点数越大，则树高越小。\n首先考虑到数据是存放在硬盘中的，而硬盘的特性是一次会读取一块数据，在树的高度较大时，我们需要读取的次数就会更多。所以B树在硬盘中的读取较平衡二叉树要高效\n但是 B 树的每个节点都包含数据（索引+记录），而用户的记录数据的大小很有可能远远超过了索引数据，这就需要花费更多的磁盘 I/O 操作次数来读到有用的索引数据。\n而且，在我们查询位于底层的某个节点比如 A 记录过程中，非 A 记录节点里的记录数据会从磁盘加载到内存，但是这些记录数据是没用的，我们只是想读取这些节点的索引数据来做比较查询，而非 A 记录节点里的记录数据对我们是没用的，这样不仅增多磁盘 I/O 操作次数，也占用内存资源。\nB+ 树就是对 B 树做了一个升级，MySQL 中索引的数据结构就是采用了 B+ 树，B+ 树结构如下图：\nB+ 树与 B 树差异的点，主要是以下这几点：\n 叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引； 所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表； 非叶子节点的索引也会同时存在在子节点中，并且是在子节点中所有索引的最大（或最小）。 非叶子节点中有多少个子节点，就有多少个索引；  相较于B树，B+tree有以下优点：\n一、 查询时间更稳定\nB 树进行单个索引查询时，最快可以在 O(1) 的时间代价内就查到，而从平均时间代价来看，会比 B+ 树稍快一些。\n但是 B 树的查询波动会比较大，因为每个节点即存索引又存记录，所以有时候访问到了非叶子节点就可以找到索引，而有时需要访问到叶子节点才能找到索引。\nB+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I/O次数会更少。\n二、插入和删除效率更高\nB树查询和删除都可以通过修改单个叶子节点以及查找路径上的索引完成，而B树在删除时有可能需要对树进行复杂变形，导致删除效率慢\n三、范围查找\nB 树和 B+ 树等值查询原理基本一致，先从根节点查找，然后对比目标数据的范围，最后递归的进入子节点查找。\n但因为 B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助。可以不用进行树干的遍历，直接在页子节点中进行顺序遍历\nRedis常见数据结构(5常4新)(越详细越好-_-) 五常\nString字符串\nList列表\nhash哈希\nset集合\nzset有序集合\n四新\nbitmap\ngeo\nHyperLogLog\nstream\n详细不起来了\nRedis为什么快，线程模型是怎么样的，为什么要用这种模型？ Redis 是一种基于内存的数据库，对数据的读写操作都是在内存中完成，因此读写速度非常快\nRedis在6.0之前采用单线程模型\nRedis 单线程模型指的是「接收客户端请求-\u0026gt;解析请求 -\u0026gt;进行数据读写等操作-\u0026gt;发送数据给客户端」这个过程是由一个线程（主线程）来完成的，这也是我们常说 Redis 是单线程的原因。\n但是，Redis 程序并不是单线程的，Redis 在启动的时候，是会启动后台线程（BIO）的：\n Redis 在 2.6 版本，会启动 2 个后台线程，分别处理关闭文件、AOF 刷盘这两个任务； Redis 在 4.0 版本之后，新增了一个新的后台线程，用来异步释放 Redis 内存，也就是 lazyfree 线程。例如执行 unlink key / flushdb async / flushall async 等命令，会把这些删除操作交给后台线程来执行，好处是不会导致 Redis 主线程卡顿。因此，当我们要删除一个大 key 的时候，不要使用 del 命令删除，因为 del 是在主线程处理的，这样会导致 Redis 主线程卡顿，因此我们应该使用 unlink 命令来异步删除大key。  Redis 6.0 版本之前的单线程模式如下图：\n图中的蓝色部分是一个事件循环，是由主线程负责的，可以看到网络 I/O 和命令处理都是单线程。 Redis 初始化的时候，会做下面这几件事情：\n 首先，调用 epoll_create() 创建一个 epoll 对象和调用 socket() 一个服务端 socket 然后，调用 bind() 绑定端口和调用 listen() 监听该 socket； 然后，将调用 epoll_ctl() 将 listen socket 加入到 epoll，同时注册「连接事件」处理函数。  初始化完后，主线程就进入到一个事件循环函数，主要会做以下事情：\n 首先，先调用处理发送队列函数，看是发送队列里是否有任务，如果有发送任务，则通过 write 函数将客户端发送缓存区里的数据发送出去，如果这一轮数据没有发送完，就会注册写事件处理函数，等待 epoll_wait 发现可写后再处理 。 接着，调用 epoll_wait 函数等待事件的到来：  如果是连接事件到来，则会调用连接事件处理函数，该函数会做这些事情：调用 accpet 获取已连接的 socket -\u0026gt; 调用 epoll_ctl 将已连接的 socket 加入到 epoll -\u0026gt; 注册「读事件」处理函数； 如果是读事件到来，则会调用读事件处理函数，该函数会做这些事情：调用 read 获取客户端发送的数据 -\u0026gt; 解析命令 -\u0026gt; 处理命令 -\u0026gt; 将客户端对象添加到发送队列 -\u0026gt; 将执行结果写到发送缓存区等待发送； 如果是写事件到来，则会调用写事件处理函数，该函数会做这些事情：通过 write 函数将客户端发送缓存区里的数据发送出去，如果这一轮数据没有发送完，就会继续注册写事件处理函数，等待 epoll_wait 发现可写后再处理 。    之所以在6.0前采用单线程模型，是因为CPU并不是制约 Redis 性能表现的瓶颈所在，更多情况下是受到内存大小和网络I/O的限制，所以 Redis 核心网络模型使用单线程并没有什么问题。\n在6.0之后采用了多线程结构\n这是因为随着网络硬件的性能提升，Redis 的性能瓶颈有时会出现在网络 I/O 的处理上。\n所以为了提高网络 I/O 的并行度，Redis 6.0 对于网络 I/O 采用多线程来处理。但是对于命令的执行，Redis 仍然使用单线程来处理\n","date":"2022-08-04T16:34:28+08:00","permalink":"https://blog.jhas.site/p/20220804-%E5%85%AB%E8%82%A1%E7%AC%94%E8%AE%B0/","title":"20220804 八股笔记"},{"content":"2049. 统计最高分的节点数目 题面 给你一棵根节点为 0 的 二叉树 ，它总共有 n 个节点，节点编号为 0 到 n - 1 。同时给你一个下标从 0 开始的整数数组 parents 表示这棵树，其中 parents[i] 是节点 i 的父节点。由于节点 0 是根，所以 parents[0] == -1 。\n一个子树的 大小 为这个子树内节点的数目。每个节点都有一个与之关联的 分数 。求出某个节点分数的方法是，将这个节点和与它相连的边全部 删除 ，剩余部分是若干个 非空 子树，这个节点的 分数 为所有这些子树 大小的乘积 。\n请你返回有 最高得分 节点的 数目 。\n解析 有点像 树的重心 这道题，用dfs做即可。每个节点可递归计算其两个子树节点数，父节点之前的数可以用整体数量减去即可\n解法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution { public: int num = 0; long long ans = 0; int cnt = 0; vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; V; int countHighestScoreNodes(vector\u0026lt;int\u0026gt;\u0026amp; parents) { num = parents.size(); V.resize(num, {-1,-1}); for(int i = 1;i\u0026lt;num;i++){ if(V[parents[i]].first != -1){ V[parents[i]].second = i; }else{ V[parents[i]].first = i; } } dfs(0); return cnt; } int dfs(int n){ if(n == -1) return 0; int l = dfs(V[n].first); int r = dfs(V[n].second); long long t = max((long long)(num - l - r - 1),(long long)1)*max((long long)1,(long long)l)*max((long long)1,(long long)r); if(t\u0026gt;ans){ ans = t; cnt = 0; } if(ans == t) cnt++; return l + r + 1; } };   ","date":"2022-03-11T08:18:06+08:00","permalink":"https://blog.jhas.site/p/20220311-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2049-%E7%BB%9F%E8%AE%A1%E6%9C%80%E9%AB%98%E5%88%86%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E7%9B%AE/","title":"20220311 每日一题 Leetcode2049 统计最高分的节点数目"},{"content":"589. N 叉树的前序遍历 题面 给定一个 n 叉树的根节点 root ，返回 其节点值的 前序遍历 。\n解析 没啥好说的，dfs遍历\n解法 1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution { public: vector\u0026lt;int\u0026gt; preorder(Node* root) { vector\u0026lt;int\u0026gt; ans; dfs(root,ans); return ans; } void dfs(Node* root,vector\u0026lt;int\u0026gt;\u0026amp; ans){ if(root == NULL) return; ans.push_back(root-\u0026gt;val); for(auto \u0026amp; node:root-\u0026gt;children) dfs(node,ans); } };   ","date":"2022-03-11T08:17:39+08:00","permalink":"https://blog.jhas.site/p/20220310-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode589-n%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/","title":"20220310 每日一题 Leetcode589 N叉树的前序遍历"},{"content":"798. 得分最高的最小轮调 题面 给定一个数组 $A$，我们可以将它按一个非负整数 $K$ 进行轮调，这样可以使数组变为 $ A[K], A[K+1], A[K+2], \u0026hellip; A[A.length - 1], A[0], A[1], \u0026hellip;, A[K-1] $ 的形式。此后，任何值小于或等于其索引的项都可以记作一分。 例如，如果数组为 $[2, 4, 1, 3, 0]$，我们按 K = 2 进行轮调后，它将变成 $[1, 3, 0, 2, 4]$。这将记作 3 分，因为 1 \u0026gt; 0 [no points], 3 \u0026gt; 1 [no points], 0 \u0026lt;= 2 [one point], 2 \u0026lt;= 3 [one point], 4 \u0026lt;= 4 [one point]。\n在所有可能的轮调中，返回我们所能得到的最高分数对应的轮调索引 $K$。如果有多个答案，返回满足条件的最小的索引 $K$。\n解析 这道题非常容易想到暴力解法，但是正确思路跟暴力解法是完全不一样的。\n暴力解法:将数组二倍展开，然后依题意模拟计算每一个k的分数\n差分解法：\n对于差分解法我们首先需要推导一下结论，这点我觉得是没有经验的人比较难以想到的。\n思路不再从k开始，我们首先从每一个A[i]开始\n对于每一个A[i] , 假若在k处进行轮调， 则论调后的下标为 $(i-k+n)%n$ ,我们可以讨论k\n对于 $k \u0026lt; i$ , 则其轮调后下标为 $i-k$;\n对于$ k \u0026gt; i$,则其轮调后的下标为 $i - k+n$\n我们再来考虑 A[i]的值，\n若$A[i] \\le i$; 在 k\u0026lt;= i 的情况下 , k 每加 1 对应下标就减去1， 若使得$A[i]\\le i-k$ 即$k\\le A[i] - i$ ；\n在$k\u0026gt;i$ 的情况，显然 有 $i-k+n \u0026gt; i \\ge A[i]$ 即$k\u0026gt;i$的数完全成立\n若$A[i] \\gt i$; 在 k\u0026lt;= i 的情况下 , k 每加 1 对应下标就减去1，则完全不能有k满足 $A[i] \\le i-k$\n在$k\u0026gt;i$的情况，有 $i-k+n \u0026gt; i$ ，如果我们要使得 $ i-k+n\u0026gt;A[i] $ 即我们需要$k\\lt i+n - A[i]$ ，则我们可以得出结论 $i\u0026lt;k\u0026lt;i+n-A[n]$\n对于上述情况，每一个i能使得加分数的k都是连续的一段，则我们只需要差分记录开始点和结束点，即可在$O(n)$时间复杂度内推算出所有k\n总的来说，暴力的思路是 k -\u0026gt; i\n而差分的思路是 i-\u0026gt;k\n错误解法 暴力 时间复杂度:$O(n^2)$ 会TLE\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution { public: int bestRotation(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); for(int i = 0;i\u0026lt;n;i++){ nums.push_back(nums[i]); } pair\u0026lt;int,int\u0026gt; ans = {0,0}; for(int i = 0;i\u0026lt;n;i++){ int cnt = 0; for(int j = 0;j\u0026lt;n;j++){ if(nums[i+j] \u0026lt;= j)cnt++; } if(cnt\u0026gt;ans.second){ ans = {i,cnt}; } } return ans.first; } };   正确解法 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution { public: int bestRotation(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;int\u0026gt; pre(n+1,0); for(int i = 0;i\u0026lt;nums.size();i++){ if(i\u0026lt;nums[i]){ pre[i+1] += 1; pre[i-nums[i]+n+1] -= 1; }else{ pre[i+1] += 1; pre[0] += 1; pre[i - nums[i] + 1] -= 1; } } int ans = 0; for(int i = 1;i\u0026lt;n;i++){ pre[i]+=pre[i-1]; if(pre[i] \u0026gt; pre[ans]){ ans = i; } } return ans; } };   ","date":"2022-03-09T07:17:37+08:00","permalink":"https://blog.jhas.site/p/20220309-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode798-%E5%BE%97%E5%88%86%E6%9C%80%E9%AB%98%E7%9A%84%E6%9C%80%E5%B0%8F%E8%BD%AE%E8%B0%83/","title":"20220309 每日一题 Leetcode798 得分最高的最小轮调"},{"content":"2055. 蜡烛之间的盘子 题面 略\n解析 首先这是一道需要求区间和的问题，遇到这种问题我们自然而然地想到前缀和的方法，只需要我们记录下每个位置前面以及它自己当前位置的蜡烛数量，就可以在$O(1)$时间内求得对应的区间蜡烛数量\n然后我们接下来要考虑的是如何获得查询区间的蜡烛数量，我们只需要找到左边界右边第一个蜡烛，右边界左边第一个蜡烛即可获得答案。若找到的两个蜡烛都在区间内，则可得到区间蜡烛数量，否则为0\n显然蜡烛位置可以看成一个有序数组，我们可以用二分查找来找到对应的蜡烛。\n另一种方法是在每个位置，记录其左边第一个蜡烛与右边第一个蜡烛，这样就可以直接对应每一个区间找到其对应的蜡烛。\n解法一 二分查找 时间复杂度:$O(n+q\\log n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  class Solution { public: vector\u0026lt;int\u0026gt; platesBetweenCandles(string s, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; queries) { vector\u0026lt;int\u0026gt; pre(s.size(),0),ret,fx; int cnt = 0; int i = 0; while(i\u0026lt;s.length()\u0026amp;\u0026amp;s[i] != \u0026#39;|\u0026#39;) i++; for(;i\u0026lt;s.length();i++){ if(s[i] == \u0026#39;|\u0026#39;){ fx.push_back(i); if(i == 0) continue; pre[i] = pre[i-1] + cnt; cnt = 0; }else{ pre[i] = pre[i-1]; cnt++; } } for(auto \u0026amp;q : queries){ int tidx = lower_bound(fx.begin(), fx.end(), q[0]) - fx.begin(); if(tidx == fx.size() || fx[tidx] \u0026gt;= q[1]){ ret.push_back(0); continue; } int lidx = upper_bound(fx.begin(), fx.end(), q[1]) - fx.begin() -1; if(tidx == -1 || fx[lidx] \u0026lt; q[0] || fx[lidx]\u0026gt;q[1]){ ret.push_back(0); continue; } if(tidx == lidx){ ret.push_back(0); }else{ ret.push_back(pre[fx[lidx]] - pre[fx[tidx]]); } } return ret; } };   解法二 记录 时间复杂度：$O(n+q)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  class Solution { public: vector\u0026lt;int\u0026gt; platesBetweenCandles(string s, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; queries) { vector\u0026lt;int\u0026gt; pre,ret,left(s.size(),-1),right(s.size(),-1); int cnt = 0; for(int i = 0;i\u0026lt;s.length();i++){ if(s[i] == \u0026#39;*\u0026#39;) cnt++; pre.push_back(cnt); } int tag = -1; for(int i = 0;i\u0026lt;s.length();i++){ if(s[i] == \u0026#39;|\u0026#39;) tag = i; left[i] = tag; } for(int i = s.size() - 1;i\u0026gt;=0;i--){ if(s[i] == \u0026#39;|\u0026#39;) tag = i; right[i] = tag; } for(auto \u0026amp;q : queries){ if(right[q[0]] \u0026gt; q[1] || left[q[1]] \u0026lt; q[0]){ ret.push_back(0); }else{ ret.push_back(pre[left[q[1]]] - pre[right[q[0]]]); } } return ret; } };   ","date":"2022-03-08T22:17:50+08:00","permalink":"https://blog.jhas.site/p/20220308-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2055-%E8%9C%A1%E7%83%9B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%98%E5%AD%90/","title":"20220308 每日一题 Leetcode2055 蜡烛之间的盘子"},{"content":"504. 七进制数 题面 给定一个整数 num，将其转化为 7 进制，并以字符串形式输出。\n解析 用十进制转任意进制的方法来解即可，首先解决正负问题\n解法 1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution { public: string convertToBase7(int num) { if(num == 0) return \u0026#34;0\u0026#34;; string pre = num\u0026lt;0?\u0026#34;-\u0026#34;:\u0026#34;\u0026#34;; num = abs(num); string ans = \u0026#34;\u0026#34;; while(num){ ans=to_string(num%7) + ans; num/=7; } return pre+ans; } };   ","date":"2022-03-08T22:14:56+08:00","permalink":"https://blog.jhas.site/p/20220307-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode504-%E4%B8%83%E8%BF%9B%E5%88%B6%E6%95%B0/","title":"20220307 每日一题 Leetcode504 七进制数 "},{"content":"2100. 适合打劫银行的日子 题面 你和一群强盗准备打劫银行。给你一个下标从 0 开始的整数数组 security ，其中 security[i] 是第 i 天执勤警卫的数量。日子从 0 开始编号。同时给你一个整数 time 。\n如果第 i 天满足以下所有条件，我们称它为一个适合打劫银行的日子：\n第 i 天前和后都分别至少有 time 天。 第 i 天前连续 time 天警卫数目都是非递增的。 第 i 天后连续 time 天警卫数目都是非递减的。 更正式的，第 i 天是一个合适打劫银行的日子当且仅当：security[i - time] \u0026gt;= security[i - time + 1] \u0026gt;= \u0026hellip; \u0026gt;= security[i] \u0026lt;= \u0026hellip; \u0026lt;= security[i + time - 1] \u0026lt;= security[i + time].\n请你返回一个数组，包含 所有 适合打劫银行的日子（下标从 0 开始）。返回的日子可以 任意 顺序排列。\n解析 这道题一开始没想到前缀和的解法，往滑动窗口那边去想了，所以这道题解法其实挺多样的。\n双指针滑动窗口 针对左边界l与右边界r。若其距离里面的日子数量为 2*time + 1 时，该段为一个合适的时间段，其中中间即 (l+r)/2 这天即为合适的日子。\n那么我们可以令r向前找，然后想办法迁移l。 显然在\n在$r\\le l+time$时，必有 $ security[r - 1] \\ge security[r]$, 若$ security[r - 1] \\lt security[r] $ 则 $l$ 迁移到 $r+1$ 处\n在 $ r\\ge l+time $时, 必有 $ security[r - 1] \\le security[r]$, 若$security[r-1] \\gt security[r]$ 则 $l$ 迁移到 $r+1$\n当 $ r - l == 2*time $ 时， 此时$(r+l)/2$ 即为合适的日子，同时如果$security[(r+l)/2] == security[(r+l)/2 + 1]$ 则将l++。\n如果不等的话,将l迁移到当前$security[r] $ 值的最前处\n比如\n[1,1,1,2,2,0,1,1]\n在 $l = 0, r = 4 $ 处会获得一个值，则我们需要把$l$ 迁移到 3 处，为了完成这一步骤，我们可以用一个标记来特殊标记r的连续数.\n前缀和 前缀和就没有那么多特殊讨论了，只需要先做一遍递减前缀数量，然后做一遍递增后缀数量即可。当前缀数量和后缀数量大于time时，当前位置就是对应的数量\n解法一(前缀和) 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution { public: vector\u0026lt;int\u0026gt; goodDaysToRobBank(vector\u0026lt;int\u0026gt;\u0026amp; security, int time) { vector\u0026lt;int\u0026gt; pre(security.size(),0),r_pre(security.size(),0),ret; for(int i = 1;i\u0026lt;security.size();i++){ if(security[i-1]\u0026gt;=security[i]){ pre[i] = pre[i-1]+1; } } for(int i = security.size()-2;i\u0026gt;=0;i--){ if(security[i]\u0026lt;=security[i+1]){ r_pre[i] = r_pre[i+1]+1; } } for(int i = 0;i\u0026lt;security.size();i++){ if(pre[i]\u0026gt;=time\u0026amp;\u0026amp;r_pre[i]\u0026gt;=time){ ret.push_back(i); } } return ret; } };   解法二(双指针滑动窗口) 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Solution { public: vector\u0026lt;int\u0026gt; goodDaysToRobBank(vector\u0026lt;int\u0026gt;\u0026amp; security, int time) { vector\u0026lt;int\u0026gt; ret; int l = 0,r =0,mov = 0; while(r\u0026lt;security.size()){ if(r-l == time*2){ int idx = (r+l)\u0026gt;\u0026gt;1; ret.push_back(idx); if(idx+1\u0026lt; security.size() \u0026amp;\u0026amp; security[idx] == security[idx+1]){ l++; }else if(time == 0){ l++; }else{ l = mov; } } if(++r \u0026gt;= security.size()) break; if(r\u0026lt;=l+time){ if(security[r]\u0026gt;security[r-1]){ l = r; } }else if(r == l+time + 1){ if(security[r]\u0026lt;security[r-1]){ l++; } mov = r; }else{ if(security[r]\u0026lt;security[r-1]){ l = mov; }else if(security[r]\u0026gt;security[r-1]){ mov = r; } } } return ret; } };   ","date":"2022-03-06T11:56:14+08:00","permalink":"https://blog.jhas.site/p/20220306-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2100-%E9%80%82%E5%90%88%E6%89%93%E5%8A%AB%E9%93%B6%E8%A1%8C%E7%9A%84%E6%97%A5%E5%AD%90/","title":"20220306 每日一题 Leetcode2100 适合打劫银行的日子"},{"content":"521. 最长特殊序列 Ⅰ 题面 给你两个字符串 a 和 b，请返回 这两个字符串中 最长的特殊序列 的长度。如果不存在，则返回 -1 。\n「最长特殊序列」 定义如下：该序列为 某字符串独有的最长子序列（即不能是其他字符串的子序列） 。\n字符串 s 的子序列是在从 s 中删除任意数量的字符后可以获得的字符串。\n例如，\u0026ldquo;abc\u0026rdquo; 是 \u0026ldquo;aebdc\u0026rdquo; 的子序列，因为删除 \u0026ldquo;aebdc\u0026rdquo; 中斜体加粗的字符可以得到 \u0026ldquo;abc\u0026rdquo; 。 \u0026ldquo;aebdc\u0026rdquo; 的子序列还包括 \u0026ldquo;aebdc\u0026rdquo; 、 \u0026ldquo;aeb\u0026rdquo; 和 \u0026quot;\u0026quot; (空字符串)。\n解析 不要想复杂，反正只有两个字符串，比较长的那个肯定不是短的那个的子序列。所以只需要判断以下两个序列一不一样，然后返回比较长的那个即可\n解法 时间复杂度: $O(n)$\n1 2 3 4 5 6  class Solution { public: int findLUSlength(string a, string b) { return a.size() == b.size() \u0026amp;\u0026amp; a == b ? -1 : max(a.size(),b.size()); } };   ","date":"2022-03-05T13:01:02+08:00","permalink":"https://blog.jhas.site/p/20220305-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode521-%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97/","title":"20220305 每日一题 Leetcode521 最长特殊序列Ⅰ"},{"content":"2104. 子数组范围和 题面 给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。\n返回 nums 中所有子数组范围的和 。\n子数组是数组中一个连续 非空 的元素序列。\n解析 首先直接的一个想法：暴力枚举\n直接枚举l 左边界，然后枚举r右边界，维护最大与最小值。最后可以得出答案\n显然以上时间复杂度为$O(n^2)$,让我们来对其加以改进。\n首先我们分离范围内的最大值与最小值，即不必在每一个元素都计算出其范围，在最后的时候我们只需要把所有子数组的最大值和与最小值和相减，则可得出所有子数组范围的和，\n那么我们的问题就退化为如何求所有子数组的最大值和与最小值和。\n我们首先来考虑最大值。我们来枚举右边界$r$ ,然后针对每一个$r$再来枚举$l$(暴力解法反了一反)，我们可以发现对于每一个 $r$ 其枚举的$l$都是之前已经出现过的$r$。再看我们需要求的是最大值。我们设$ nums[l]\u0026hellip;nums[r]$子数组最大值点为$i$,我们可以发现任意左边界处于$[l,i)$，右边界为$r$的子数组，其最大值都为$nums[i]$。$nums[i]$就如同一个挡板一样，挡住了前面更小的数。直到我们找到前面比$nums[i]$更大的数，那么这个时候我们就可以使用单调栈来处理这个过程。\n我们来考虑一个单调递减栈,里面维护一个数对 ${idx,cnt}$.我们枚举$nums$, 对于每一个$i$ ,我们首先考虑$nums[i] \u0026gt;=nums[top.idx]$ 的情况，在该种情况下对于任意$j\u0026gt;i$, 在尝试求$nums[top.idx]\u0026hellip;nums[j]$的过程中,$nums[top.idx]$ 都会被$nums[i]$挡住,在入栈$i$时我们可以把top出栈,而对于top这个数对，我们需要找到前面挡住top.idx的更前一个数对,也即top出栈后的栈顶，我们称为l_top,那么对于$nums[l_top.idx]\u0026hellip; nums[top.idx]$中的任意子数组，其最大值都为$num[top.idx]$,再考虑$k\u0026lt;l_top.idx$，这里对于任意$nums[k]\u0026hellip; nums[top.idx]$的子数组，其最大值都为$nums[l_top.idx]$。如果在这个时候清算右边界为i的子数组最大值的话，我们的时间复杂度会回退到$O(n^2)$,所以我们不应该在此时向前清算最大值，这时$cnt$的作用就来了,cnt的含义为：当前位置到前一个小值之间的被移除的位置的数量, 也即一个懒标志，先不计算这些被移除的位置的子数组，待当前数出栈时一起计算。我们出栈top的时候令$l_top.cnt = l_top.cnt + top.cnt$，答案加上$(top.idx-l_top.idx)*nums[cnt.idx]*top.cnt$\n求最小值的时候思路相似，使用单调递增栈.\n解法一(暴力枚举) 时间复杂度:$O(n^2)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Solution { public: long long subArrayRanges(vector\u0026lt;int\u0026gt;\u0026amp; nums) { long long ans = 0; for(int l = 0;l\u0026lt;nums.size();l++){ int maxn = nums[l]; int minn = nums[l]; for(int r = l+1;r\u0026lt;nums.size();r++){ maxn = max(maxn,nums[r]); minn = min(minn,nums[r]); ans += maxn - minn; } } return ans; } };   解法二(单调栈) 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  class Solution { public: long long subArrayRanges(vector\u0026lt;int\u0026gt;\u0026amp; nums) { long long ans = 0; stack\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; increasing_st,decreasing_st; for(int i = 0;i\u0026lt;nums.size();i++){ while(!increasing_st.empty()\u0026amp;\u0026amp;nums[increasing_st.top().first]\u0026lt;=nums[i]){ auto top = increasing_st.top(); increasing_st.pop(); if(increasing_st.empty()){ ans += (long long)(top.first+1)*(long long)top.second*(long long)nums[top.first]; }else{ increasing_st.top().second += top.second; ans += (long long)(top.first-increasing_st.top().first)*(long long)top.second*(long long)nums[top.first]; } } while(!decreasing_st.empty()\u0026amp;\u0026amp;nums[decreasing_st.top().first]\u0026gt;=nums[i]){ auto top = decreasing_st.top(); decreasing_st.pop(); if(decreasing_st.empty()){ ans -= (long long)(top.first+1)*(long long)top.second*(long long)nums[top.first]; }else{ decreasing_st.top().second += top.second; ans -= (long long)(top.first-decreasing_st.top().first)*(long long)top.second*(long long)nums[top.first]; } } increasing_st.emplace(i,1); decreasing_st.emplace(i,1); } while(!increasing_st.empty()){ auto top = increasing_st.top(); increasing_st.pop(); if(increasing_st.empty()){ ans += (long long)(top.first+1)*(long long)top.second*(long long)nums[top.first]; }else{ increasing_st.top().second += top.second; ans += (long long)(top.first-increasing_st.top().first)*(long long)top.second*(long long)nums[top.first]; } } while(!decreasing_st.empty()){ auto top = decreasing_st.top(); decreasing_st.pop(); if(decreasing_st.empty()){ ans -= (long long)(top.first+1)*(long long)top.second*(long long)nums[top.first]; }else{ decreasing_st.top().second += top.second; ans -= (long long)(top.first-decreasing_st.top().first)*(long long)top.second*(long long)nums[top.first]; } } return ans; } };   ","date":"2022-03-04T09:03:38+08:00","permalink":"https://blog.jhas.site/p/20220304-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2104-%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C/","title":"20220304 每日一题 Leetcode2104 子数组范围和"},{"content":"258. 各位相加 题面 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。\n思路 此题有两种解法:\n 模拟 数学  模拟 自己按照题意模拟即可，但时间复杂度较差\n数学 对于该数，可以把它展开\n设$ a_i $ 为每一位上的数字，统共有n-1位 $$ num = \\sum_{i=0}^{n-1} a_i * 10^i\\ =\\sum_{i=0}^{n-1} a_i * (10^i - 1 + 1)\\ =\\sum_{i=0}^{n-1} a_i * (10^i - 1 ) + \\sum_{i=0}^n a_i\\ $$ 对于每个 $\\sum_{i=0}^{n-1} a_i * (10^i - 1 ) $ 都是九的倍数，也即num与 $\\sum_{i=0}^{n-1} a_i$ 模9同余，对于$\\sum_{i=0}^{n-1} a_i$ 我们也可以进行相同的展开，直到$\\sum_{i=0}^{n-1} a_i$ 为个位数的时候，我们可以发现上述最后得到的结果个位数也与num模9同余\n此时需针对num分类讨论\n  当num不为9的倍数的时候:\n 此时剩个位数此时结果即为所求个位数    当num为9的倍数的时候\n 若num为0：结果为0； 当num不为0，显然结果为9；    解法(模拟) 时间复杂度: $O(\\log num)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution { public: int addDigits(int num) { while(num\u0026gt;=10){ int ans = 0; while(num){ ans+=num%10; num/=10; } num = ans; } return num; } };   解法(数学) 时间复杂度:$O(1)$\n1 2 3 4 5 6  class Solution { public: int addDigits(int num) { return num?(num-1)%9 + 1:0; } };   ","date":"2022-03-03T08:12:34+08:00","permalink":"https://blog.jhas.site/p/20220303-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode258-%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/","title":"20220303 每日一题 Leetcode258 各位相加"},{"content":"564. 寻找最近的回文数 题面 给定一个表示整数的字符串 n ，返回与它最近的回文整数（不包括自身）。如果不止一个，返回较小的那个。\n“最近的”定义为两个整数差的绝对值最小。\n解析 这题其实不值得hard的难度，整体来说只是代码比较难写，需要分类讨论较多情况而已\n首先对于个整数字符串n\n我们找出它的大于它的最近回文数与小于它的最近回文数，然后把两个回文数与n的差取绝对值比较即可。\n对于大回文数与小回文数，我们首先考虑的是在不对n的上半部分增减数字的情况下构造一个回文数，若这个回文数小于n，则该回文数为小回文数。反之若大于n，则该回文数为大回文数。若等于n则必须增减数字来构造回文数。\n首先我们先讨论大回文数的构造：\n若要取得大于n的最小回文数，则必是对n的上半部分进行一个 +1 操作(贪心的思想)(因为数字回文所以下半部分不重要)，然后使用上半部分继续构造回文数\n同时我们考虑一下进位的情况:\n对于 9999 来说 +1 后 变为10099 构造后 10001,为9999的上界回文数。即只需要构造即可，不需要特别在意进位。\n然后我们讨论一下小回文数的构造:\n与大回文数构造的思想相同,若要取得小于n的最小回文数，则必是对n的上半部分进行一个 -1 操作(贪心的思想)(因为数字回文所以下半部分不重要)，然后使用上半部分继续构造回文数.\n我们再来考虑一下进位的情况。这时候我们就需要区分长度奇偶了。\n先来讨论长度为偶数，进位后为奇数的情况:\n对于100000 来说 -1后变 99000 假如我们直接按上部回文构造的话就会变为 99099,显然 99999 才是100000 的下界回文数，所以我们需要将中间位也变为9，\n换句话来说就是检测到头部为0，需要将 len/2 这个位置变为 9\n再来讨论长度为奇数，进位后为偶数的情况:\n对于 10000 来说 -1 后变为 9900, 构造后变为9999 是正确的答案，所以长度为奇数进位后为偶数的情况是不需要特殊构造的。\n解法 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113  class Solution { public: long long int find_up(string n){ auto lln = parse(n); int len = n.size(); string local_tmp = n; for(int i = 0;i\u0026lt;len/2;i++){ local_tmp[len-i-1] = local_tmp[i]; } auto local_n = parse(local_tmp); if(local_n\u0026gt;lln) return local_n; if(len%2){ local_tmp[len/2]+=1; if(local_tmp[len/2] == \u0026#39;0\u0026#39;+10){ for(int i = len/2;i\u0026gt;=0;i--){ if(i == 0 \u0026amp;\u0026amp; local_tmp[i] == \u0026#39;0\u0026#39;+10){ local_tmp[i] = \u0026#39;0\u0026#39;; local_tmp = \u0026#34;1\u0026#34;+local_tmp; break; }else if(local_tmp[i] == \u0026#39;0\u0026#39;+10){ local_tmp[i-1]+=1; local_tmp[i] = \u0026#39;0\u0026#39;; }else{ break; } } } }else{ local_tmp[len/2-1]+=1; if(local_tmp[len/2-1] == \u0026#39;0\u0026#39;+10){ for(int i = len/2 - 1;i\u0026gt;=0;i--){ if(i == 0 \u0026amp;\u0026amp; local_tmp[i] == \u0026#39;0\u0026#39;+10){ local_tmp[i] = \u0026#39;0\u0026#39;; local_tmp = \u0026#34;1\u0026#34;+local_tmp; break; }else if(local_tmp[i] == \u0026#39;0\u0026#39;+10){ local_tmp[i-1]+=1; local_tmp[i] = \u0026#39;0\u0026#39;; }else{ break; } } } } for(int i = 0;i\u0026lt;local_tmp.size()/2;i++){ local_tmp[local_tmp.size()-i-1] = local_tmp[i]; } return parse(local_tmp); } long long int find_low(string n){ auto lln = parse(n); int len = n.size(); string local_tmp = n; for(int i = 0;i\u0026lt;len/2;i++){ local_tmp[len-i-1] = local_tmp[i]; } auto local_n = parse(local_tmp); if(local_n\u0026lt;lln) return local_n; if(len%2){ local_tmp[len/2]-=1; if(local_tmp[len/2] == \u0026#39;0\u0026#39;-1){ for(int i = len/2;i\u0026gt;=0;i--){ if(i == 0 \u0026amp;\u0026amp; local_tmp[i] == \u0026#39;0\u0026#39;){ if(local_tmp.size() == 1) break; local_tmp = local_tmp.substr(1); break; }else if(local_tmp[i] == \u0026#39;0\u0026#39;-1){ local_tmp[i-1]-=1; local_tmp[i] = \u0026#39;9\u0026#39;; }else{ break; } } } }else{ local_tmp[len/2-1]-=1; if(local_tmp[len/2-1] == \u0026#39;0\u0026#39;-1||(len/2-1 == 0 \u0026amp;\u0026amp; local_tmp[len/2-1] == \u0026#39;0\u0026#39;)){ for(int i = len/2 - 1;i\u0026gt;=0;i--){ if(i == 0 \u0026amp;\u0026amp; local_tmp[i] == \u0026#39;0\u0026#39;){ local_tmp[len/2] = \u0026#39;9\u0026#39;; local_tmp = local_tmp.substr(1); break; }else if(local_tmp[i] == \u0026#39;0\u0026#39;-1){ local_tmp[i-1]-=1; local_tmp[i] = \u0026#39;9\u0026#39;; } } } } for(int i = 0;i\u0026lt;local_tmp.size()/2;i++){ local_tmp[local_tmp.size()-i-1] = local_tmp[i]; } return parse(local_tmp); } long long int parse(string n){ long long int ret = 0; for(int i = 0;i\u0026lt;n.size();i++){ ret*=10; ret += n[i]-\u0026#39;0\u0026#39;; } return ret; } string nearestPalindromic(string n) { auto num = parse(n); auto low = find_low(n); auto high = find_up(n); if(num-low\u0026lt;= high - num){ return to_string(low); }else{ return to_string(high); } } };   ","date":"2022-03-02T08:35:07+08:00","permalink":"https://blog.jhas.site/p/20220302-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode564-%E5%AF%BB%E6%89%BE%E6%9C%80%E8%BF%91%E7%9A%84%E5%9B%9E%E6%96%87%E6%95%B0/","title":"20220302 每日一题 Leetcode564 寻找最近的回文数"},{"content":"6. Z 字形变换 题面 将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。\n比如输入字符串为 \u0026ldquo;PAYPALISHIRING\u0026rdquo; 行数为 3 时，排列如下：\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\u0026ldquo;PAHNAPLSIIGYIR\u0026rdquo;。\n请你实现这个将字符串进行指定行数变换的函数：\nstring convert(string s, int numRows);\n解析 这题解法多样，首先可以二维数组模拟，然后其实可以使用字符串压缩模拟，然后进阶的可以直接计算每一行的字符串然后直接加起来即可\n解法一(字符串压缩行模拟) 时间复杂度:$O(n^2)$\n空间复杂度:$O(n)$ 设单个字符串空间复杂度为$O(1)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution { public: string convert(string s, int numRows) { if(numRows == 1) return s; vector\u0026lt;string\u0026gt; ret(numRows,\u0026#34;\u0026#34;); int lc = 0; int add = 1; for(int i = 0;i\u0026lt;s.size();i++){ ret[lc] += s[i]; lc += add; if(lc == numRows){ add = -1; lc-=2; }else if(lc == -1){ add = 1; lc+=2; } } string ans = \u0026#34;\u0026#34;; for(auto \u0026amp; s : ret){ ans += s; } return ans; } };   解法二(直接计算字符串) 时间复杂度:$O(n)$\n空间复杂度:$O(1)$ 设单个字符串空间复杂度为$O(1)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution { public: string convert(string s, int numRows) { if(numRows == 1) return s; vector\u0026lt;string\u0026gt; ret(numRows,\u0026#34;\u0026#34;); int lc = 0; int add = 1; for(int i = 0;i\u0026lt;s.size();i++){ ret[lc] += s[i]; lc += add; if(lc == numRows){ add = -1; lc-=2; }else if(lc == -1){ add = 1; lc+=2; } } string ans = \u0026#34;\u0026#34;; for(auto \u0026amp; s : ret){ ans += s; } return ans; } };   ","date":"2022-03-01T07:49:37+08:00","permalink":"https://blog.jhas.site/p/20220301-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode6-z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/","title":"20220301 每日一题 Leetcode6 Z字形变换"},{"content":"1601. 最多可达成的换楼请求数目 题面 我们有 n 栋楼，编号从 0 到 n - 1 。每栋楼有若干员工。由于现在是换楼的季节，部分员工想要换一栋楼居住。\n给你一个数组 $requests$ ，其中 $requests[i] = [from_i, to_i]$ ，表示一个员工请求从编号为 $from_i$ 的楼搬到编号为 $to_i$ 的楼。\n一开始 所有楼都是满的，所以从请求列表中选出的若干个请求是可行的需要满足 每栋楼员工净变化为 0 。意思是每栋楼 离开 的员工数目 等于 该楼 搬入 的员工数数目。比方说 n = 3 且两个员工要离开楼 0 ，一个员工要离开楼 1 ，一个员工要离开楼 2 ，如果该请求列表可行，应该要有两个员工搬入楼 0 ，一个员工搬入楼 1 ，一个员工搬入楼 2 。\n请你从原请求列表中选出若干个请求，使得它们是一个可行的请求列表，并返回所有可行列表中最大请求数目。\n提示：\n $1\\le n \\le 20$ $1 \\le requests.length \\le 16$ $requests[i].length == 2$ $0 \\le fromi, toi \\lt n $  解析 今天这道题做了好久，想复杂了，其实很简单。。。。\n考虑数据量$requests.size \\le 16$\n能够想到使用枚举+dfs的方式来计算\n每一个请求都有着接受与不接受两种选择，只需要dfs搜索确定即可。\n另外还有一种二进制枚举的方法，与dfs差不多，枚举每一位的存在然后计算即可。\n解法一 (dfs搜索) 时间复杂度:$O(2^{requests.size})$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class Solution { public: int d[20]; int ans = 0; void dfs(int pos,int cnt,int n,vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; requests){ if(pos == requests.size()){ bool ok = true; for(int i = 0;i\u0026lt;n;i++){ if(d[i]!=0) ok = false; } if(ok) ans = max(ans,cnt); return; } dfs(pos+1, cnt, n , requests); d[requests[pos][0]] -=1; d[requests[pos][1]] +=1; dfs(pos+1, cnt+1, n,requests); d[requests[pos][1]] -=1; d[requests[pos][0]] +=1; } int maximumRequests(int n, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; requests) { memset(d, 0, sizeof(d)); dfs(0,0,n,requests); return ans; } };   解法二 (二进制枚举) 时间复杂度:$O(2^m * n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution { public: int d[20]; int maximumRequests(int n, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; requests) { int ans = 0; int m = requests.size(); for(int i = 1;i\u0026lt;1\u0026lt;\u0026lt;m;i++){ memset(d,0,sizeof(d)); for(int j = 0;j\u0026lt;m;j++){ if((i\u0026gt;\u0026gt;j)\u0026amp;1){ d[requests[j][0]]--; d[requests[j][1]]++; } } bool ok = 1; for(int j = 0;j\u0026lt;n;j++){ if(d[j]!=0) ok = false; } if(ok) ans = max(ans,__builtin_popcount(i)); } return ans; } };   ","date":"2022-02-28T08:49:52+08:00","permalink":"https://blog.jhas.site/p/20220228-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1601-%E6%9C%80%E5%A4%9A%E5%8F%AF%E8%BE%BE%E6%88%90%E7%9A%84%E6%8D%A2%E6%A5%BC%E8%AF%B7%E6%B1%82%E6%95%B0%E7%9B%AE/","title":"20220228 每日一题 Leetcode1601 最多可达成的换楼请求数目"},{"content":"553. 最优除法 题面 给定一组正整数，相邻的整数之间将会进行浮点除法操作。例如， [2,3,4] -\u0026gt; 2 / 3 / 4 。\n但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。你的表达式不应该含有冗余的括号。\n说明:\n 输入数组的长度在 [1, 10] 之间。 数组中每个元素的大小都在 [2, 1000] 之间。 每个测试用例只有一个最优除法解。  解析 其实这题主要是数学题\n针对这一整个数组，若使得数组加括号最大，则是使得被除数最大，除数最小。则显然，在长度大于二的数组中，只需要在第二个位置与最后一个位置加上括号即可。\n即有\n$ \\frac{nums[1]}{nums[2]/nums[3]/nums[4]/\u0026hellip;/nums[n]} $ = $\\frac{nums[1]*nums[3]nums[4]\u0026hellip;*nums[n]}{nums[2]}$\n此外这题还可以用dp来解，参考leetcode的dp解法，但这道题的数据量太大，用dp解法会爆long long(int64),\nleetcode能过是因为他数据量太小了\n解法一(数学解法) 时间复杂度:$ O(n) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Solution { public: string optimalDivision(vector\u0026lt;int\u0026gt;\u0026amp; nums) { string ans; for(int i = 0;i\u0026lt;nums.size();i++){ if(i == 0){ ans+= to_string(nums[i]); continue; } if(nums.size()\u0026gt;=3){ if(i == 1){ ans += \u0026#34;/(\u0026#34; + to_string(nums[i]); }else if(i == nums.size() - 1){ ans += \u0026#34;/\u0026#34; + to_string(nums[i]) + \u0026#34;)\u0026#34;; }else{ ans += \u0026#34;/\u0026#34; + to_string(nums[i]); } }else{ ans += \u0026#34;/\u0026#34; + to_string(nums[i]); } } return ans; } };   解法二(区间动态规划) 时间复杂度:$O(n^3)$\n代码来源于leetcode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  struct Node { double maxVal, minVal; string minStr, maxStr; Node() { this-\u0026gt;minVal = 10000.0; this-\u0026gt;maxVal = 0.0; } }; class Solution { public: string optimalDivision(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;vector\u0026lt;Node\u0026gt;\u0026gt; dp(n, vector\u0026lt;Node\u0026gt;(n)); for (int i = 0; i \u0026lt; n; i++) { dp[i][i].minVal = nums[i]; dp[i][i].maxVal = nums[i]; dp[i][i].minStr = to_string(nums[i]); dp[i][i].maxStr = to_string(nums[i]); } for (int i = 1; i \u0026lt; n; i++) { for (int j = 0; j + i \u0026lt; n; j++) { for (int k = j; k \u0026lt; j + i; k++) { if (dp[j][j + i].maxVal \u0026lt; dp[j][k].maxVal / dp[k + 1][j + i].minVal) { dp[j][j + i].maxVal = dp[j][k].maxVal / dp[k + 1][j + i].minVal; if (k + 1 == j + i) { dp[j][j + i].maxStr = dp[j][k].maxStr + \u0026#34;/\u0026#34; + dp[k + 1][j + i].minStr; } else { dp[j][j + i].maxStr = dp[j][k].maxStr + \u0026#34;/(\u0026#34; + dp[k + 1][j + i].minStr + \u0026#34;)\u0026#34;; } } if (dp[j][j + i].minVal \u0026gt; dp[j][k].minVal / dp[k + 1][j + i].maxVal) { dp[j][j + i].minVal = dp[j][k].minVal / dp[k + 1][j + i].maxVal; if (k + 1 == j + i) { dp[j][j + i].minStr = dp[j][k].minStr + \u0026#34;/\u0026#34; + dp[k + 1][j + i].maxStr; } else { dp[j][j + i].minStr = dp[j][k].minStr + \u0026#34;/(\u0026#34; + dp[k + 1][j + i].maxStr + \u0026#34;)\u0026#34;; } } } } } return dp[0][n - 1].maxStr; } };   ","date":"2022-02-27T20:58:36+08:00","permalink":"https://blog.jhas.site/p/20220227-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode553-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/","title":"20220227 每日一题 Leetcode553 最优除法"},{"content":"2016. 增量元素之间的最大差值 题面 给你一个下标从 $0$ 开始的整数数组 $nums$ ，该数组的大小为 $n$ ，请你计算 $nums[j] - nums[i]$ 能求得的 最大差值 ，其中 $0 \u0026lt;= i \u0026lt; j \u0026lt; n$ 且 $nums[i] \u0026lt; nums[j]$ 。\n返回 最大差值 。如果不存在满足要求的 $i$ 和 $j$ ，返回 $-1$ 。\n解析 简单得很，对于每个数，维护其前面数字最小值，然后如果这个最小值比当前数小，则将其减最小数即可\n解法 时间复杂度: $O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution { public: int maximumDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int pre_min = 1e9+1; int ans = -1; for(int i = 0;i\u0026lt;nums.size();i++){ if(pre_min\u0026lt;nums[i]){ ans = max(ans,nums[i] - pre_min); } pre_min = min(pre_min,nums[i]); } return ans; } };   ","date":"2022-02-26T11:26:17+08:00","permalink":"https://blog.jhas.site/p/20220226-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2016-%E5%A2%9E%E9%87%8F%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/","title":"20220226 每日一题 Leetcode2016 增量元素之间的最大差值"},{"content":"537. 复数乘法 题面 复数 可以用字符串表示，遵循 \u0026ldquo;实部+虚部i\u0026rdquo; 的形式，并满足下述条件：\n 实部 是一个整数，取值范围是 [-100, 100] 虚部 也是一个整数，取值范围是 [-100, 100] i2 == -1  给你两个字符串表示的复数 num1 和 num2 ，请你遵循复数表示形式，返回表示它们乘积的字符串。\n解析 标着是中等，但实际只有简单的难度，完全就是语法题，模拟就好了\n解法 时间复杂度:$O(n)$ (遍历一次字符串)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Solution { public: string complexNumberMultiply(string num1, string num2) { auto n1 = parse(num1); auto n2 = parse(num2); int sb = n1.first * n2.first - n1.second * n2.second; int xb = n1.first * n2.second + n1.second * n2.first; return to_string(sb)+\u0026#39;+\u0026#39;+to_string(xb) + \u0026#39;i\u0026#39;; } pair\u0026lt;int,int\u0026gt; parse(string nums){ int s_sign = 1,x_sign = 1,s_num = 0,x_num = 0; int i = 0; if(nums[i] == \u0026#39;-\u0026#39;){ s_sign = -1; i++; } while(nums[i]\u0026gt;=\u0026#39;0\u0026#39;\u0026amp;\u0026amp;nums[i]\u0026lt;=\u0026#39;9\u0026#39;){ s_num*=10; s_num+= nums[i++] - \u0026#39;0\u0026#39;; } i++; if(nums[i] == \u0026#39;-\u0026#39;){ x_sign = -1; i++; } while(nums[i]\u0026gt;=\u0026#39;0\u0026#39;\u0026amp;\u0026amp;nums[i]\u0026lt;=\u0026#39;9\u0026#39;){ x_num*=10; x_num+= nums[i++] - \u0026#39;0\u0026#39;; } return {s_num*s_sign,x_num*x_sign}; } };   ","date":"2022-02-25T00:12:42+08:00","permalink":"https://blog.jhas.site/p/20220225-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode537-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/","title":"20220225 每日一题 Leetcode537 复数乘法"},{"content":"1706. 球会落何处 题面 用一个大小为 $m * n$ 的二维网格 $grid$ 表示一个箱子。你有 $n$ 颗球。箱子的顶部和底部都是开着的。\n箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。\n将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。 将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。 在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 \u0026ldquo;V\u0026rdquo; 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。\n返回一个大小为 n 的数组 answer ，其中 $answer[i]$ 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 $-1$ 。\n解析 显然对于每一个下落的球，我们只需要模拟即可.\n对于每一个球,如果他现在的位置在$(x,y)$ 这格的顶部\n 如果该格为'/' 则其左边格$(x,y-1)$必须为也为'/' 才能落到$(x+1,y-1)$ 处 如果该格为'' 则其左边格$(x,y+1)$必须为也为'' 才能落到$(x+1,y+1)$ 处 否则其被拦下  我们可以用递归来得到每一个球最后下落到的位置,只需在每个(x,y) 判断是否能够继续下落，可以就继续判断下个(x,y)否则返回-1,递归终止条件为: $x == m$\n解法 时间复杂度:$ O(n*m) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class Solution { public: int n,m; vector\u0026lt;int\u0026gt; findBall(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { vector\u0026lt;int\u0026gt; ret; n = grid[0].size(); m = grid.size(); for(int i = 0;i\u0026lt;n;i++){ ret.push_back(judge(0,i,grid)); } return ret; } int judge(int x,int y,vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid){ if(x == m) return y; if(grid[x][y] == 1){ if(y+1 == n||grid[x][y+1] == -1) return -1; return judge(x+1,y+1,grid); }else{ if(y-1 \u0026lt; 0||grid[x][y-1] == 1) return -1; return judge(x+1,y-1,grid); } return -1; } };   ","date":"2022-02-24T20:14:15+08:00","permalink":"https://blog.jhas.site/p/20220224-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1706-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/","title":"20220224 每日一题 Leetcode1706 球会落何处"},{"content":"917. 仅仅反转字母 题面 给你一个字符串 s ，根据下述规则反转字符串：\n 所有非英文字母保留在原有位置。 所有英文字母（小写或大写）位置反转。  返回反转后的 s 。\n解析 按题面双指针模拟即可。\n有点像快排里的交换(部分像)。\n每个用了的指针向前/向后一位,碰到不是字母的指针也移动.\n解法 时间复杂度:$ O(n) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution { public: string reverseOnlyLetters(string s) { int l=0,r = s.size(); while(l\u0026lt;r){ if((s[l]\u0026lt;\u0026#39;A\u0026#39;||s[l]\u0026gt;\u0026#39;Z\u0026#39;)\u0026amp;\u0026amp;(s[l]\u0026lt;\u0026#39;a\u0026#39;||s[l]\u0026gt;\u0026#39;z\u0026#39;)){ l++; } else if((s[r]\u0026lt;\u0026#39;A\u0026#39;||s[r]\u0026gt;\u0026#39;Z\u0026#39;)\u0026amp;\u0026amp;(s[r]\u0026lt;\u0026#39;a\u0026#39;||s[r]\u0026gt;\u0026#39;z\u0026#39;)){ r--; }else{ swap(s[l++], s[r--]); } } return s; } };   ","date":"2022-02-23T09:30:22+08:00","permalink":"https://blog.jhas.site/p/20220223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode917-%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/","title":"20220223 每日一题 Leetcode917 仅仅反转字母"},{"content":"1994. 好子集的数目 题面 给你一个整数数组 $nums$ 。如果 $nums$ 的一个子集中，所有元素的乘积可以表示为一个或多个 互不相同的质数 的乘积，那么我们称它为 好子集 。\n比方说，如果 $nums$ = $[1, 2, 3, 4]$ ： $[2, 3]$ ，$[1, 2, 3]$ 和 $[1, 3]$ 是 好 子集，乘积分别为 $6 = 23$ ，$6 = 23$ 和 $3 = 3$ 。 $[1, 4]$ 和 $[4]$ 不是 好 子集，因为乘积分别为 $4 = 22$ 和 $4 = 22$ 。 请你返回 $nums$ 中不同的 好 子集的数目对 $10^9 + 7$ 取余 的结果。\n$nums$ 中的 子集 是通过删除 $nums$ 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。\n解析 今天这道hard题又看答案了，果然hard做得还是比较勉强。\n首先这道题解法是状压dp，没有学过的(包括我)可能挺难想到的\n针对1-30中每一个数，都可以在下面这三类中分出来:\n 1 {4,8,9,12,16,18,20,24,25,27,28} 这些是完全平方数或者因子中有完全平方的数 剩下的数  然后看30中的质数{2,3,5,7,11,13,17,19,23,29}。共有10个\n我们枚举2-30中的每一个数，每个数设为i\n我们可以拿一个十位的二进制数j，当其某一位为1时，即代表已存在对应的质数\n$dp[i][j]$的含义为在$[2,i]$的这个区间内，乘积为$j$中质数的乘积的数量\n设subset为 i 的质数分解后对应的十位二进制, cnt[i]为nums中i的数量.\n则有以下dp方程\n$ dp[i][j] = dp[i-1][j] ,i \\in {4,8,9,12,16,18,20,24,25,27,28} | subset\\notin j $ $ dp[i][j] = dp[i-1][j] + dp[i-1][j-subset] * cnt[i], i \\notin {1,4,8,9,12,16,18,20,24,25,27,28} $ $ dp[1][0] = 2^{cnt[1]} $\n需要注意的是 subset 必须为j的子集，可以用按位与来处理\n虽然i最大为30，但我们也可以用01背包把它压缩成一维\n解法 时间复杂度:$O(30*1024 + n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  const int mod = 1000000007; const int odd[] = {2,3,5,7,11,13,17,19,23,29}; const int db[] = {4,8,9,12,16,18,20,24,25,27,28}; const int N = 1\u0026lt;\u0026lt;10; class Solution { public: inline int judge(const int\u0026amp; a){ for(int i = 0;i\u0026lt;11;i++){ if(db[i] == a) return true; } return false; } int numberOfGoodSubsets(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int mp[31]; long long int dp[N]; memset(dp,0,sizeof(dp)); memset(mp,0,sizeof(mp)); for(auto \u0026amp;a : nums){ mp[a]++; } dp[0] = 1; for(int i = 0;i\u0026lt;mp[1];i++){ dp[0]*=2; dp[0]%=mod; } for(int i = 2;i\u0026lt;=30;i++){ if(judge(i)) continue; int subset = 0; for(int j = 0;j\u0026lt;10;j++){ if(i%odd[j] == 0) subset += 1\u0026lt;\u0026lt;j; } for(int j = 0;j\u0026lt;N;j++){ if((subset \u0026amp; j) != subset) continue; dp[j] = (dp[j]+dp[j-subset]*mp[i])%mod; } } int ans = 0; for(int i = 1;i\u0026lt;N;i++){ ans = (ans +dp[i])%mod; } return ans; } };   ","date":"2022-02-22T14:47:07+08:00","permalink":"https://blog.jhas.site/p/20220222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1994-%E5%A5%BD%E5%AD%90%E9%9B%86%E7%9A%84%E6%95%B0%E7%9B%AE/","title":"20220222 每日一题 Leetcode1994 好子集的数目"},{"content":"838. 推多米诺 题面 $n$ 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。\n每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。\n如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。\n就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。\n给你一个字符串 $dominoes$ 表示这一行多米诺骨牌的初始状态，其中：\n  $dominoes[i]$ = \u0026lsquo;L\u0026rsquo;，表示第 $i$ 张多米诺骨牌被推向左侧，\n  $dominoes[i]$ = \u0026lsquo;R\u0026rsquo;，表示第 $i$ 张多米诺骨牌被推向右侧，\n  $dominoes[i]$ = \u0026lsquo;.'，表示没有推动第 $i$ 张多米诺骨牌。\n  返回表示最终状态的字符串。\n解析 本题有两种思路：\n bfs搜索 双指针模拟  bfs搜索 简单说一下bfs搜索的思路，对于每一个推倒的多米诺，必然会引起连锁反应引起其它多米诺倒下。维护一个队列。队列里元素为$(i)$ 再开一个数组记录当前多米诺的状态:访问?未访问。\n对于每个倒下的多米诺，其一定不会对已访问的多米诺产生影响，对于一开始已经倒下的多米诺记为已访问。同时对于每次访问的多米诺，仅仅只在其被取出为队头时才记录为访问。\n再次对于每个倒下的多米诺，其影响一定是左边或右边，修改其对应影响的未访问的多米诺的状态，当一个多米诺同时被两边访问(未被访问但已经为L或R)时，该多米诺为直立。\n以上情况直到队列空为止\n双指针模拟 对于每一个倒下的多米诺都会影响一个一个区间。只要用双指针模拟这个区间即可\n解法 双指针模拟\n时间复杂度: $O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  class Solution { public: string pushDominoes(string dominoes) { int l = 0; for(int i = 0;i\u0026lt;dominoes.size();i++){ if(dominoes[i] == \u0026#39;L\u0026#39;){ if(dominoes[l] == \u0026#39;R\u0026#39;){ for(int j = 0;j\u0026lt;=(i-l)/2;j++){ if(l+j == i-j){ continue; } dominoes[l+j] = \u0026#39;R\u0026#39;; dominoes[i-j] = \u0026#39;L\u0026#39;; } }else{ while(l\u0026lt;=i){ dominoes[l++] = \u0026#39;L\u0026#39;; } } l = i+1; }else if(dominoes[i] == \u0026#39;R\u0026#39;){ if(dominoes[l] == \u0026#39;R\u0026#39;){ while(l\u0026lt;i){ dominoes[l++] = \u0026#39;R\u0026#39;; } } l = i; } } if(dominoes[l] == \u0026#39;R\u0026#39;){ while(l\u0026lt;dominoes.size()) dominoes[l++] = \u0026#39;R\u0026#39;; } return dominoes; } };   ","date":"2022-02-21T11:12:29+08:00","permalink":"https://blog.jhas.site/p/20220221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode838-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/","title":"20220221 每日一题 Leetcode838 推多米诺"},{"content":"717. 1比特与2比特字符 题面 有两种特殊字符：\n  第一种字符可以用一个比特 0 来表示\n  第二种字符可以用两个比特(10 或 11)来表示\n  给定一个以 0 结尾的二进制数组 bits ，如果最后一个字符必须是一位字符，则返回 true 。\n解析 简简单单模拟即可\n解法 时间复杂度: $ O(n) $\n1 2 3 4 5 6 7 8 9 10  class Solution { public: bool isOneBitCharacter(vector\u0026lt;int\u0026gt;\u0026amp; bits) { for(int i = 0;i\u0026lt;bits.size();i++){ if(i == bits.size() - 1) return true; if(bits[i] == 1) i++; } return false; } };   ","date":"2022-02-20T10:55:44+08:00","permalink":"https://blog.jhas.site/p/20220220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode717-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/","title":"20220220 每日一题 Leetcode717 1比特与2比特字符"},{"content":"969. 煎饼排序 题面 给你一个整数数组 $arr$ ，请使用 煎饼翻转 完成对数组的排序。\n一次煎饼翻转的执行过程如下：\n 选择一个整数 $k$ ，$1 \\le k \\le arr.length$ 反转子数组 $arr[0\u0026hellip;k-1]$（下标从 0 开始）  例如，$arr = [3,2,1,4]$ ，选择 $k = 3$ 进行一次煎饼翻转，反转子数组 $[3,2,1]$ ，得到 $arr = [1,2,3,4]$ 。\n以数组形式返回能使 $arr$ 有序的煎饼翻转操作所对应的 $k$ 值序列。任何将数组排序且翻转次数在 $10 * arr.length$ 范围内的有效答案都将被判断为正确。\n解析 考虑一下每次都将某个下标翻到第一位，然后将它再翻到它对应的位置，操作次数只需 $2 * arr.length$即可\n又有如果我们要让每一次翻面不会搞乱前面的翻面，则我们应该从右往左翻。枚举每一个值即可。\n代码 时间复杂度:$ O(n^2) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution { public: vector\u0026lt;int\u0026gt; pancakeSort(vector\u0026lt;int\u0026gt;\u0026amp; arr) { int n = arr.size(); vector\u0026lt;int\u0026gt; ret; for(int i = n;i\u0026gt;=1;i--){ auto t = arr.begin(); for(;t!=arr.end();t++){ if(*t == i){ ret.push_back(t-arr.begin() + 1); ret.push_back(i); reverse(arr.begin(),t+1); reverse(arr.begin(),arr.begin()+i); break; } } } return ret; } };   ","date":"2022-02-19T09:21:44+08:00","permalink":"https://blog.jhas.site/p/20220219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode969-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/","title":"20220219 每日一题 Leetcode969 煎饼排序"},{"content":"1791. 找出星型图的中心节点 题面 有一个无向的 星型 图，由 n 个编号从 1 到 n 的节点组成。星型图有一个 中心 节点，并且恰有 n - 1 条边将中心节点与其他每个节点连接起来。\n给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示在节点 ui 和 vi 之间存在一条边。请你找出并返回 edges 所表示星型图的中心节点。\n解析 这题太白给了，恰有n-1条边代表每个edge数组内都有一个相等的值\n则只需要比较第一第二个数组即可\n做法 时间复杂度: $ O(1) $\n1 2 3 4 5 6 7 8 9  class Solution { public: int findCenter(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; edges) { if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]){ return edges[0][0]; } return edges[0][1]; } };   ","date":"2022-02-18T08:37:24+08:00","permalink":"https://blog.jhas.site/p/20220218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1791-%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9/","title":"20220218 每日一题 Leetcode1791 找出星型图的中心节点"},{"content":"688. 骑士在棋盘上的概率 题面 在一个 $n * n$ 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 $k$ 次移动。行和列是 从 $0$ 开始 的，所以左上单元格是 $(0,0)$ ，右下单元格是 $(n - 1, n - 1)$ 。\n象棋骑士有$8$种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。\n每次骑士要移动时，它都会随机从$8$种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。\n骑士继续移动，直到它走了 $k$ 步或离开了棋盘。\n返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。\n解析 由于对于每一次的移动，其到某格的概率为该格其八个方向到该格的概率，则设dp方程为 $$ dp[0][row][column] = 1\\ dp[k][i][j] = \\sum_{n=0}^7 dp[k-1][i+x_n][j+y_n] * \\frac{1}{8}\\ $$ 其中 $$ x[8] = {-2,-2,-1,-1,1,1,2,2};\\ y[8] = {-1,1,2,-2,2,-2,-1,1};\\ $$ 最后统计$dp[k]$中所有值的和，即为最后留在棋盘上的概率\n同时由于每一层的dp仅依赖于上一层的dp，故可以用奇偶性来压缩数组大小\n代码 时间复杂度:$ O(k*n^2) $\n空间复杂度:$ O(n^2) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class Solution { public: double dp[2][25][25]; int tx[8] = {-2,-2,-1,-1,1,1,2,2}; int ty[8] = {-1,1,2,-2,2,-2,-1,1}; double knightProbability(int n, int k, int row, int column) { dp[0][row][column] = 1.0; for(int t = 1;t\u0026lt;=k;t++){ for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;n;j++){ double cnt = 0; for(int l = 0;l\u0026lt;8;l++){ int dx = i+tx[l]; int dy = j+ty[l]; if(dx\u0026lt;0||dx\u0026gt;=n||dy\u0026lt;0||dy\u0026gt;=n) continue; cnt += dp[(t-1)\u0026amp;1][dx][dy] * 1.0/8.0; } dp[t\u0026amp;1][i][j] = cnt; } } } double cnt = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;n;j++){ cnt += dp[k\u0026amp;1][i][j]; } } return cnt; } };   ","date":"2022-02-17T00:05:45+08:00","permalink":"https://blog.jhas.site/p/20220217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/","title":"20220217 每日一题 Leetcode688 骑士在棋盘上的概率"},{"content":"1719. 重构一棵树的方案数 今天这道题前前后后看了两小时，最后忍不住看答案了\n题面 给你一个数组 $pairs$ ，其中 $pairs[i] = [x_i, y_i]$ ，并且满足：\n $pairs$ 中没有重复元素 $xi \u0026lt; yi$  令 $ways$ 为满足下面条件的有根树的方案数：\n 树所包含的所有节点值都在 $pairs$ 中。 一个数对 $[xi, yi]$ 出现在 $pairs$ 中 当且仅当 $x_i$ 是 $y_i$ 的祖先或者 $y_i$ 是 $x_i$ 的祖先。 注意：构造出来的树不一定是二叉树。 两棵树被视为不同的方案当存在至少一个节点在两棵树中有不同的父节点。  请你返回：\n如果 $ways == 0$，返回0。 如果 $ways == 1$，返回1。 如果 $ways \u0026gt; 1 $ ，返回 2 。\n一棵 有根树 指的是只有一个根节点的树，所有边都是从根往外的方向。\n我们称从根到一个节点路径上的任意一个节点（除去节点本身）都是该节点的 祖先 。根节点没有祖先。\n解析 注意题面的当且仅当，故有以下结论\n 每一个能够成为根节点的值，必然与其它节点的值构成一个$pair$ 对于该树以及其子树，每一个节点的父节点的度都 大于或等于其子节点的度 每一个子节点的邻接节点集都为父节点的子集  则对于重构一颗树，我们可以先确定其根节点的值，然后枚举剩下的节点，确定其父节点的值，然后检查父节点值成立\n对于每一个父节点值，考虑到父节点的父节点的度必然大于或等于父节点的度，则有以下寻找父节点的规则:选取与当前节点邻接且节点度为最小的大于或等于当前节点度的节点\n然后对于每一个节点度都需要检查当前节点除去父节点的邻接节点集合是否为父节点邻接节点集合的子集\n对于每一个父节点和子节点，若其度相等，则可以互换,由于其度相等，也即两个集合除去其对应的节点剩下节点都相同，又有在数对中x，y可以互换。故父节点和子节点可以互换，此时方案数大于1。\n如果不存在上述节点，但是每个节点(除根节点)都可以确定合适的父节点，则方案数为1\n否则方案数为0\n解法 时间复杂度:$ O(m + n^2)$\n空间复杂度:$ O(m) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  class Solution { public: int checkWays(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; pairs) { unordered_map\u0026lt;int,unordered_set\u0026lt;int\u0026gt;\u0026gt; adj; int ans = 0; for(auto \u0026amp;v : pairs){ adj[v[0]].emplace(v[1]); adj[v[1]].emplace(v[0]); } int n = adj.size(); int root = -1; for(auto \u0026amp;[k,v] : adj){ if(v.size() == n-1){ root = k; break; } } if(root == -1) return 0; for(auto \u0026amp;[k,neighbors] : adj){ if(k == root) continue; int curDegree = neighbors.size(); int parent = -1; int parentDegree = INT_MAX; for(auto \u0026amp;neighbor : neighbors){ if(adj[neighbor].size()\u0026gt;=curDegree\u0026amp;\u0026amp;adj[neighbor].size()\u0026lt;=parentDegree){ parent = neighbor; parentDegree = adj[neighbor].size(); } } if(parent == -1) return 0; for(auto \u0026amp;neighbor : neighbors){ if(neighbor == parent) continue; if(adj[parent].find(neighbor) == adj[parent].end()){ return 0; } } if(parentDegree == curDegree) ans = max(ans,2); else ans = max(ans,1); } return ans; } };   另附一份非常漂亮的解法,用时仅237ms,是leetcode最好的用时样例了\n首先它直接将节点按度排序，然后根据以上性质，度比较大的节点总是度比较小节点的父节点，故对每个节点，只需要逆序遍历即可确定父节点及祖先节点。然后再次对每个节点，确定比它后的节点的联通性以及其是否在节点链上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  class Solution { public: // 思路有  int checkWays(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; pairs) { int maxn = 0; for(auto\u0026amp; p : pairs) maxn = max(maxn, max(p[0], p[1])); // 求出关系数,初始化关系矩阵(conn)  int deg[maxn + 1], conn[maxn + 1][maxn + 1]; memset(deg, 0, sizeof(deg)); memset(conn, 0, sizeof(conn)); for(auto\u0026amp; p : pairs) { conn[p[0]][p[1]] = conn[p[1]][p[0]] = 1; deg[p[0]]++, deg[p[1]]++; } // 求出实际点数 n  int nodes[maxn + 1], n = 0; for(int i = 1; i \u0026lt;= maxn; ++i) if(deg[i]) nodes[n++] = i; // 按照 \u0026#34;关系数\u0026#34; 从大到小排序  sort(nodes, nodes + n, [\u0026amp;](int a, int b) { return deg[a] \u0026gt; deg[b]; }); // 根节点必须是其它节点的祖先  if(deg[nodes[0]] != n-1) return 0; // 寻找父节点 (fa) 和祖先节点 (all_fa)  int fa[maxn + 1], all_fa[maxn + 1][maxn + 1]; memset(fa, 0, sizeof(fa)); memset(all_fa, 0, sizeof(all_fa)); for(int i = 0; i \u0026lt; n; ++i) { for(int j = i-1; j \u0026gt;= 0; --j) { if(conn[nodes[i]][nodes[j]]) { fa[nodes[i]] = nodes[j]; for(int f = fa[nodes[i]]; f; f = fa[f]) all_fa[nodes[i]][f] = 1; break; } } } // 根据题目定义判断即可  int res = 1; for(int i = 1; i \u0026lt;= maxn; ++i) { for(int j = i + 1; j \u0026lt;= maxn; ++j) { if(conn[i][j] \u0026amp;\u0026amp; deg[i] == deg[j]) res = 2; // 判断是否有多个解  if(conn[i][j] != (all_fa[i][j] || all_fa[j][i])) return 0; // 判断是否违反题目要求  } } return res; } };   ","date":"2022-02-16T10:18:20+08:00","permalink":"https://blog.jhas.site/p/20220216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1719-%E9%87%8D%E6%9E%84%E4%B8%80%E9%A2%97%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/","title":"20220216 每日一题 Leetcode1719 重构一颗树的方案数"},{"content":"1380. 矩阵中的幸运数 题面 给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。\n幸运数是指矩阵中满足同时下列两个条件的元素：\n在同一行的所有元素中最小 在同一列的所有元素中最大\n解析 模拟就完事了\n代码 时间复杂度: $ O(nm) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  class Solution { public: bool r[51],c[51]; vector\u0026lt;int\u0026gt; luckyNumbers (vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { int n = matrix.size(); int m = matrix[0].size(); vector\u0026lt;int\u0026gt; ans; auto judge = [\u0026amp;](int x,int y) -\u0026gt; bool{ if(r[y] || c[x]) return false; int t = matrix[x][y]; for(int i = 0;i\u0026lt;n;i++){ if(i == x) continue; if(matrix[i][y] \u0026gt;= t) return false; } for(int i = 0;i\u0026lt;m;i++){ if(i == y) continue; if(matrix[x][i] \u0026lt;= t) return false; } r[y] = true; c[x] = true; return true; }; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(judge(i,j)) ans.push_back(matrix[i][j]); } } return ans; } };   ","date":"2022-02-15T01:37:58+08:00","permalink":"https://blog.jhas.site/p/20220215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1380-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0/","title":"20220215 每日一题 Leetcode1380 矩阵中的幸运数"},{"content":"540. 有序数组中的单一元素 题面 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。\n请你找出并返回只出现一次的那个数。\n你设计的解决方案必须满足 $O(\\log n)$ 时间复杂度和 $O(1)$ 空间复杂度。\n呜呜呜，破防了。我就是这个单一元素吧QAQ\n解析 如果不在意题的$ O(\\log n) $特殊要求的话，其实可以直接对整个数组异或和即可得到这单一元素(成双成对的元素都各自领走自己的另一半出去约会去了，就剩这单一元素QAQ)\n回到题面上，按着题面的$O(\\log n)$要求的话则是需要用到二分。属于是一道非常经典的二段性分析的题。\n假设单一元素的下标为 $ k $ , 则有下列条件\n设$ \\forall i \\in N, 2i \u0026lt; k $\n那么有 $ nums[2i] == nums[2i+1] $\n且对于$ \\forall i \\in N, 2i \u0026gt; k $\n有$ nums[2i] == nums[2i-1] $\n可以说$nums[k]$干扰了成对数组的序列，使其的规律改变，使数组的性质变成了二段。\n至此其实已经分析完毕了一种做法:对偶数下标进行二分。\n为了减少代码量，我们将偶数做法扩展到自然数做法。\n设$ \\forall i \\in N , i \u0026lt; k$\n若$i$为奇数则$nums[i] == nums[i-1]$\n若$i$为偶数则$ nums[i] == nums[i+1] $\n对于$i\u0026gt;k$ 上述情况相反\n我们再考虑 $i \\oplus 1$ 的情况，若$i$为奇数 $i \\oplus 1 = i - 1$,偶数则$ i \\oplus 1 = i + 1 $\n即将上述情况合并为\n$ nums[i] == nums[i \\oplus 1] $\n解法一 时间复杂度:$ O(n) $\n非常暴力\n1 2 3 4 5 6 7 8 9 10  class Solution { public: int singleNonDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int ans = 0; for_each(nums.begin(),nums.end(),[\u0026amp;](auto \u0026amp; n){ ans^=n; }); return ans; } };   解法二 时间复杂度:$ O(\\log n) $\n对于任意数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution { public: int singleNonDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int l = 0,r = nums.size()-1; while(l\u0026lt;r){ int mid = (r+l)\u0026gt;\u0026gt;1; if(nums[mid] != nums[mid ^ 1]){ r = mid; }else{ l = mid +1; } } return nums[l]; } };   对于偶数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Solution { public: int singleNonDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { nums.push_back(nums.back()+1); int l = 0,r = nums.size()/2-1; while(l\u0026lt;r){ int mid = (r+l)\u0026gt;\u0026gt;1; if(nums[mid*2] != nums[mid*2 + 1]){ r = mid; }else{ l = mid + 1; } } return nums[l*2]; } };   ","date":"2022-02-14T07:48:38+08:00","permalink":"https://blog.jhas.site/p/20220214-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/","title":"20220214 每日一题 Leetcode540 有序数组中的单一元素"},{"content":"Leetcode第280场周赛 6004. 得到 0 的操作数 题面 给你两个 非负 整数 num1 和 num2 。\n每一步 操作 中，如果 num1 \u0026gt;= num2 ，你必须用 num1 减 num2 ；否则，你必须用 num2 减 num1 。\n解析 没啥好说的，模拟就完事了。更相减损术\n解法 1 2 3 4 5 6 7 8  class Solution { public: int countOperations(int num1, int num2) { if(num1 == 0 || num2 == 0) return 0; if(num1\u0026gt;=num2) return 1 + countOperations(num2,num1-num2); return 1 + countOperations(num1,num2-num1); } };   6005. 使数组变成交替数组的最少操作数 题面 给你一个下标从 0 开始的数组 nums ，该数组由 n 个正整数组成。\n如果满足下述条件，则数组 nums 是一个 交替数组 ：\nnums[i - 2] == nums[i] ，其中 2 \u0026lt;= i \u0026lt;= n - 1 。 nums[i - 1] != nums[i] ，其中 1 \u0026lt;= i \u0026lt;= n - 1 。 在一步 操作 中，你可以选择下标 i 并将 nums[i] 更改 为 任一 正整数。\n返回使数组变成交替数组的 最少操作数 。\n解析 贪心的思想，只需要把数组拆分成奇数数组和偶数数组，然后统计两个数组各个数字出现次数，选取最大的出现即可，主要是注意最大的数字相等的情况，当最大数字相等时，只需要把最大数字和另一次大数字相加，比较不相等的数量。\n解法 时间复杂度:$O(n\\log n)$ 偷懒用了优先队列，可以是$ O(n) $的时间复杂度\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  class Solution { public: int minimumOperations(vector\u0026lt;int\u0026gt;\u0026amp; nums) { unordered_map\u0026lt;int,int\u0026gt; m1,m2; for(int i = 0;i\u0026lt;nums.size();i++){ if(i%2 == 1){ ++m1[nums[i]]; } else{ ++m2[nums[i]]; } } priority_queue \u0026lt;pair\u0026lt;int,int\u0026gt;,vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt;,less\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt;\u0026gt;q1,q2; for(auto \u0026amp;[k,v] : m1){ q1.push({v,k}); } for(auto \u0026amp;[k,v] : m2){ q2.push({v,k}); } if(q1.empty()||q2.empty()) return 0; if(q1.top().second == q2.top().second){ int t1 = q1.top().first; int t2 = q2.top().first; q1.pop(); q2.pop(); t1 += q2.empty()?0:q2.top().first; t2 += q1.empty()?0:q1.top().first; return nums.size() - max(t1,t2); } int a = q1.empty()?0:q1.top().first; int b = q2.empty()?0:q2.top().first; int ans = nums.size() - a - b; return ans ; } };   6006. 拿出最少数目的魔法豆 题面 给你一个 正 整数数组 beans ，其中每个整数表示一个袋子里装的魔法豆的数目。\n请你从每个袋子中 拿出 一些豆子（也可以 不拿出），使得剩下的 非空 袋子中（即 至少 还有 一颗 魔法豆的袋子）魔法豆的数目 相等 。一旦魔法豆从袋子中取出，你不能将它放到任何其他的袋子中。\n请你返回你需要拿出魔法豆的 最少数目。\n解析 简简单单排序然后比较,排完序后对于每一个位置$i$，都有若取这个位置$i$的数作为基准,应该减少的豆子为$ total - beans[i]*(size - i) $ 其中$ total $为豆子的总量，$size$为袋子的数目\n解法 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution { public: long long minimumRemoval(vector\u0026lt;int\u0026gt;\u0026amp; beans) { long long ans = LLONG_MAX; sort(beans.begin(),beans.end()); int n = beans.size(); long long cnt = 0; for_each(beans.begin(),beans.end(),[\u0026amp;](int \u0026amp;a){ cnt+=a; }); for(int i = 0;i\u0026lt;beans.size();i++){ long long mans = cnt - beans[i]*(long long)(n-i); ans = min(ans,mans); } return ans; } };   6007. 数组的最大与和 题面 给你一个长度为 n 的整数数组 nums 和一个整数 numSlots ，满足2 * numSlots \u0026gt;= n 。总共有 numSlots 个篮子，编号为 1 到 numSlots 。\n你需要把所有 n 个整数分到这些篮子中，且每个篮子 至多 有 2 个整数。一种分配方案的 与和 定义为每个数与它所在篮子编号的 按位与运算 结果之和。\n比方说，将数字 [1, 3] 放入篮子 1 中，[4, 6] 放入篮子 2 中，这个方案的与和为 (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4 。 请你返回将 nums 中所有数放入 numSlots 个篮子中的最大与和。\n解析 待补题\n解法 待补题\n","date":"2022-02-13T12:14:10+08:00","permalink":"https://blog.jhas.site/p/20220213-leetcode280%E5%91%A8%E8%B5%9B/","title":"20220213 Leetcode280周赛"},{"content":"1189. “气球” 的最大数量 题面 给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 \u0026ldquo;balloon\u0026rdquo;（气球）。\n字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 \u0026ldquo;balloon\u0026rdquo;。\n解析 超级白给题,直接记录每一个小写字母大小，然后对应字母数量除以每个字母数量取最小值即可。\n解法 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12  class Solution { public: int maxNumberOfBalloons(string text) { int st[26] = {}; for(auto \u0026amp; c : text){ st[c - \u0026#39;a\u0026#39;]++; } st[\u0026#39;l\u0026#39; - \u0026#39;a\u0026#39;]/=2; st[\u0026#39;o\u0026#39; - \u0026#39;a\u0026#39;]/=2; return min(min(st[\u0026#39;b\u0026#39; - \u0026#39;a\u0026#39;],min(st[\u0026#39;l\u0026#39; - \u0026#39;a\u0026#39;],st[\u0026#39;o\u0026#39; - \u0026#39;a\u0026#39;])),min(st[0],st[\u0026#39;n\u0026#39; - \u0026#39;a\u0026#39;])); } };   如果将balloon扩展到任意字符串，则为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution { public: int maxNumberOfBalloons(string text) { return maxNumberOfAnyString(text, \u0026#34;balloon\u0026#34;); // 在leetcode上提交的时候还少打了个o，直接wa了一发  } int maxNumberOfAnyString(string text,string target){ int c_text[26] = {},c_target[26] = {}; for(auto \u0026amp; c : text){ c_text[c - \u0026#39;a\u0026#39;]++; } for(auto \u0026amp; c : target){ c_target[c - \u0026#39;a\u0026#39;]++; } for(int i = 0;i\u0026lt;26;i++){ if(c_target[i] == 0){ c_text[i] = INT_MAX; }else{ c_text[i]/=c_target[i]; } } return *min_element(c_text,c_text+26); } };   或许你会很奇怪为什么2月13号的每日一题2月12号就做了，因为我明天要出去玩\u0026lt;-_\u0026lt;- ps:leetcode每日一题是可以提前看到的\n","date":"2022-02-12T23:06:52+08:00","permalink":"https://blog.jhas.site/p/20220213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1189-%E6%B0%94%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/","title":"20220213 每日一题 Leetcode1189 气球的最大数量"},{"content":"1020. 飞地的数量 题面 给你一个大小为 $m * n$ 的二进制矩阵 $grid$ ，其中 $0$ 表示一个海洋单元格、$1$ 表示一个陆地单元格。\n一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 $grid$ 的边界。\n返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。\n解析 题目非常白给，求无法 在任意次数的移动中离开网格边界的陆地单元格的数量，也即不与边界有相联的联通块，这时我们有两种思路：\n 从边界块出发，看看边界块延伸的最长块 从每一块陆地块出发，看看是否能到边界  两种情况正好对应了两种解法:\n 多源dfs/bfs 并查集  解法一 dfs和bfs在这题的情况下效果是一样的，首先记录下每一个边界陆地块，然后从边界陆地块出发搜索陆地块，如果可以碰到则把碰到的块1变为0，最后遍历grid标记其值为1的数量。\n由于我们每次碰到后都会把1标为0，所以每一个块实际入 栈/队列 次数为 $n*m$\n所以时间复杂度:$O(mn)$\n代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { int n = grid.size(); int m = grid[0].size(); queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; Q; for(int i = 0;i\u0026lt;m;i++){ if(grid[0][i]) Q.push({0,i}),grid[0][i] = 0; if(grid[n-1][i]) Q.push({n-1,i}),grid[n-1][i] = 0; } for(int i = 0;i\u0026lt;n;i++){ if(grid[i][0]) Q.push({i,0}),grid[i][0] = 0; if(grid[i][m-1]) Q.push({i,m-1}),grid[i][m-1] = 0; } while(!Q.empty()){ auto head = Q.front(); Q.pop(); for(int i = 0;i\u0026lt;4;i++){ int dx = head.first + tx[i]; int dy = head.second + ty[i]; if(dx\u0026gt;=0\u0026amp;\u0026amp;dx\u0026lt;n\u0026amp;\u0026amp;dy\u0026gt;=0\u0026amp;\u0026amp;dy\u0026lt;m\u0026amp;\u0026amp;grid[dx][dy]){ Q.push({dx,dy}); grid[dx][dy] = 0; } } } int ans = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j]) ans++; } } return ans; } };   解法二 其实在这题的情况下，并查集比dfs/bfs 时间复杂度高而且难写，所以一般不用(狗头),但是还是写出来\n首先这里用到一个二维压一维的操作，由于在并查集里位置信息并不重要，所以可以以 $ i*m+j $ 编码每一个块。另外地，为了标记一个块是否与边界联通，还需要一个额外的标记。\n首先遍历每一个块，若为陆地块则尝试和旁边陆地块合并。\n然后遍历每一个块，查找其顶层标记是否为边界标记\n时间复杂度: $ O(mn×\\alpha(mn)) $ $ \\alpha$为反阿克曼函数，为并查集查找的时间复杂度\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  class Union{ public: Union(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid){ int n = grid.size(); int m = grid[0].size(); u.resize(n*m); sign.resize(n*m,0); for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ u[i*m+j] = i*m+j; if(i == 0 || i == n-1 || j == 0||j == m-1){ sign[i*m+j] = grid[i][j]; } } } }; int find(int n){ return n == u[n]?n:u[n] = find(u[n]); }; int check(int n){ if(u[n] == n) return sign[n]; if(sign[n]) return 1; return sign[n] = check(u[n]); }; void merge(int n,int m){ int tn = find(n); int tm = find(m); if(tn != tm){ u[tn] = tm; sign[tm] = sign[tm] | sign[tn] | sign[n] | sign[m]; } } private: vector\u0026lt;int\u0026gt; u; vector\u0026lt;int\u0026gt; sign; }; class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { Union u(grid); int n = grid.size(); int m = grid[0].size(); for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j] == 0) continue; for(int k = 0;k\u0026lt;4;k++){ int dx = i + tx[k]; int dy = j + ty[k]; if(dx\u0026gt;=0\u0026amp;\u0026amp;dx\u0026lt;n\u0026amp;\u0026amp;dy\u0026gt;=0\u0026amp;\u0026amp;dy\u0026lt;m\u0026amp;\u0026amp;grid[dx][dy]) u.merge(i*m+j, dx*m+dy); } } } int ans = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j] == 0) continue; if(!u.check(i*m+j)) ans++; } } return ans; } };   ","date":"2022-02-12T09:50:17+08:00","permalink":"https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/","title":"20220212 每日一题 Leetcode1020 飞地的数量"},{"content":"1984. 学生分数的最小差值 题面 给你一个 下标从 0 开始 的整数数组 $nums$ ，其中 $nums[i]$ 表示第 $i$ 名学生的分数。另给你一个整数 $k$ 。\n从数组中选出任意 $k$ 名学生的分数，使这 $k$ 个分数间 最高分 和 最低分 的 差值 达到 最小化 。\n返回可能的 最小差值 。\n解析 若使$k$名学生的分数差值达到最小化，从$nums$取$k$个数，如果这$k$个数正好是最大最小数差值最小化，则$nums$必无其它数在这$k$个数之间。显然若使从$nums$取出任意$i$都满足从$i$后取$k$个数差值最小化，则数组必然有序。\n解法 将数组排序然后枚举$i$滑动窗口即可\n时间复杂度: $O( n \\log n)$\n1 2 3 4 5 6 7 8 9 10 11 12  class Solution { public: int minimumDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int i,n = nums.size(),ans; sort(nums.begin(),nums.end()); ans = 100010; for(i = k - 1;i\u0026lt;n;i++){ ans = min(ans,nums[i] - nums[i - k + 1]); } return ans; } };   ","date":"2022-02-11T12:56:58+08:00","permalink":"https://blog.jhas.site/p/20220211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1984-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/","title":"20220211 每日一题 Leetcode1984 学生分数的最小差值"},{"content":"二分搜索 简述 二分搜索是一种效率较高的查找方法，用于在有序(二段)数组内查找一个特定数。得益于有序(二段)数组的性质，每一次查找可以筛除一段数量大于一的数段(常见为$\\frac{n}{2} $),故能在$ O(\\log n) $的时间复杂度内找到对应答案。\n二分的本质是二段性而不是单调性\n应用 二分通常被用于一个有序数组查找一个数或一个位置，这个数通常是一个最小或最大值/位置(边界位置)。\n常见二分通常有两种：\n 整数二分 浮点二分  整数二分 整数二分通常查找一个范围的上界或下界\n比如说不超过/不低于某个数最大/最小的数的位置与其值。\n总的来说，查找的区间可以被分为两个部分，一个部分满足条件，另一部分不满足条件，答案则在两部分的交点。\n浮点二分 通常是函数求根、开方等问题，比较简单，while循环终止条件是精度e，更新时l和r都更新为mid即可。\n基本代码 整数二分有两种，一种是寻找上界(即寻找不符合性质的最后一个点)，一种是下界(即寻找符合性质的第一个点)\n整数二分上界 1 2 3 4 5 6 7 8 9 10  int bsearch(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; }   整数二分下界 1 2 3 4 5 6 7 8 9 10  int bsearch(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; else l = mid + 1; } return l; }   浮点二分则比较单调，通常是函数求根、开方等问题\n浮点二分 1 2 3 4 5 6 7 8 9 10 11 12  int main() { double n; cin \u0026gt;\u0026gt; n; double l = -10000, r = 10000, mid; while(r - l \u0026gt; 1e-7){ mid = (l + r) / 2; if(check(mid)) r = mid; else l = mid ; } printf(\u0026#34;%.6f\u0026#34;, l); }   STL STL里提供了lower_bound()和upper_bound()两个函数用于一个排好序的数组二分查找\nlower_bound:返回数组中第一个大于或等于被查数的迭代器\nupper_bound:返回数组中第一个大于被查数的迭代器\n1 2 3 4 5 6 7 8 9  int main(){ int num[6]={1,2,4,7,15,34}; sort(num.begin(),num.end()); int lower_idx = lower_bound(num.begin(),num.end(),4) - num.begin(); // 值为2，lower_bound返回了位置为2的迭代器  int upper_idx = upper_bound(num.begin(),num.end(),4) - num.begin(); // 值为3, upper_bound返回了位置为3的迭代器  sort(num.begin(),num.end(),greater\u0026lt;int\u0026gt;()); //从大到小排序,此时为 [34,15,7,4,2,1]  int greater_lower_idx = lower_bound(num.begin(),num.end(),4,greater\u0026lt;int\u0026gt;()) - num.begin();// 值为3,lower_bound返回了位置为3的迭代器,即查找到第一个小于或等于4的数  int greater_upper_idx = lower_bound(num.begin(),num.end(),4,greater\u0026lt;int\u0026gt;()) - num.begin();// 值为4,lower_bound返回了位置为4的迭代器,即查找到第一个小于4的数 }   这里不得不提到 greater() 和 less() 了\n其实其内部结构为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  template\u0026lt;class _Ty = void\u0026gt; struct less { // functor for operator\u0026lt;  typedef _Ty first_argument_type; typedef _Ty second_argument_type; typedef bool result_type; constexpr bool operator()(const _Ty\u0026amp; _Left, const _Ty\u0026amp; _Right) const { // apply operator\u0026lt; to operands  return (_Left \u0026lt; _Right); } }; template\u0026lt;class _Ty = void\u0026gt; struct greater { // functor for operator\u0026gt;  typedef _Ty first_argument_type; typedef _Ty second_argument_type; typedef bool result_type; constexpr bool operator()(const _Ty\u0026amp; _Left, const _Ty\u0026amp; _Right) const { // apply operator\u0026gt; to operands  return (_Left \u0026gt; _Right); } };   这是一个仿函数, 以greater()为例, greater()其实获得了一个匿名对象，而这个对象等效于\n1 2 3  bool cmp(const int\u0026amp; _Left, const int\u0026amp; _Right) const { return _Left \u0026gt; _Right }   或者\n1 2 3  [](const int\u0026amp; _Left, const int\u0026amp; _Right) -\u0026gt; bool { return _Left \u0026gt; _Right }   即一个比较函数\n回到二分查找的STL，下面是它们的源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  _ForwardIterator __lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp\u0026amp; __val, _Compare __comp) { typedef typename iterator_traits\u0026lt;_ForwardIterator\u0026gt;::difference_type _DistanceType; _DistanceType __len = std::distance(__first, __last); while (__len \u0026gt; 0) { _DistanceType __half = __len \u0026gt;\u0026gt; 1; _ForwardIterator __middle = __first; std::advance(__middle, __half); if (__comp(__middle, __val)) { __first = __middle; ++__first; __len = __len - __half - 1; } else __len = __half; } return __first; } _ForwardIterator __upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp\u0026amp; __val, _Compare __comp) { typedef typename iterator_traits\u0026lt;_ForwardIterator\u0026gt;::difference_type _DistanceType; _DistanceType __len = std::distance(__first, __last); while (__len \u0026gt; 0) { _DistanceType __half = __len \u0026gt;\u0026gt; 1; _ForwardIterator __middle = __first; std::advance(__middle, __half); if (__comp(__val, __middle)) __len = __half; else { __first = __middle; ++__first; __len = __len - __half - 1; } } return __first; }   主要的差别在于__comp()的用法，而__comp()又是我们的仿函数以less()为例，则差别在于lower_bound比较 $ mid \u0026lt; val$ 而upper_bound比较 $val \u0026lt; mid$\n对于 lower_bound来说，如果__comp()为true则将first设置为mid，否则将长度减少一半(STL里二分使用长度来表示)。\n对于 upper_bound来说，如果__comp()为true则将长度减少一半，否则将将first设置为mid，\n区别在于两个true表示的范围不一样，\n更直观的表示是，如果将upper_bound改写成以下形式\n1 2 3 4 5 6 7 8  if (!__comp(__val, __middle)){ __first = __middle; ++__first; __len = __len - __half - 1; } else{ __len = __half; }   其实是将if else切换一下\n这个时候$mid \u0026lt;= val$ 正巧比lower_bound多了个等号，即右范围涵盖了mid，这就是upper_bound与lower_bound的差别，\n总的来说，STL里的upper_bound与lower_bound其实实现的是整数二分下界，区别在于__comp的应用和二段的划分\n经典题目 Leetcode704. 二分查找\n标准二分查找\nacwing789. 数的范围\n二分边界查找(上界\\下界)\nacwing790. 数的三次方根\n二分浮点\nLeetcode1984. 学生分数的最小差值\n这个不是很经典，但是可以用二分答案做\n参考文章 AcWing 789. 数的范围（详细分析二分过程）\n二分查找算法模板\nAcWing 789. 二分模板笔记\nC++：greater和less\n关于lower_bound( )和upper_bound( )的常见用法\n","date":"2022-02-10T12:07:04+08:00","permalink":"https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/","title":"二分范围查找笔记"},{"content":"1447. 最简分数 题面 给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。\n解析 非常简单的暴力数论题，对于任意 $ i$ $j $ 来说，满足 $ 0\u0026lt; j/i \u0026lt;1 $ 即满足 $ j \u0026lt; i $ ,考虑到 $ 1\\leq n \\leq 100 $ 则只需暴力枚举每一个 $i$,$j$ 即可得出答案，对于任意$i$,$j$ ，满足$ j/i $为最简分数，即两数不可同时除以任意数且结果为整数，即两数互质，等价于 $ gcd(i,j) = 1 $\n解法 时间复杂度:$ O(n^2\\log n) $\n代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution { public: vector\u0026lt;string\u0026gt; simplifiedFractions(int n) { vector\u0026lt;string\u0026gt; ret; for(int i = 2;i\u0026lt;=n;i++){ for(int j = 1;j\u0026lt;i;j++){ if(__gcd(i,j) == 1){ ret.push_back(itoa(j)+\u0026#34;/\u0026#34;+itoa(i)); } } } return ret; } string itoa(int i){ if(i== 0) return \u0026#34;\u0026#34;; return itoa(i/10) + char(\u0026#39;0\u0026#39; + i%10); } };   ","date":"2022-02-10T08:40:23+08:00","permalink":"https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/","title":"20220210 每日一题 Leetcode1447 最简分数"},{"content":"2006. 差的绝对值为 K 的数对数目 题面 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i \u0026lt; j 且 |nums[i] - nums[j]| == k 。\n|x| 的值定义为：\n如果 x \u0026gt;= 0 ，那么值为 x 。 如果 x \u0026lt; 0 ，那么值为 -x 。\n解析 题目非常白给，照着题目意思顺下去分析即可\n对于 $$ |nums[i] - nums[j]| = k $$ 拆解后有两种可能 $$ nums[i] = k + nums[j] $$ 与 $$ nums[i] = nums[j] - k $$ 既对于任意 $ j $ 只需要统计到 $ i\u0026lt;j $ 的数目即可\n解法一 时间复杂度 $ O(n^2)$\n空间复杂度 $ O(1) $\n暴力枚举每一个j与i，检查是否正确\n解法二 时间复杂度 $ O(n) $\n空间复杂度 $ O(n) $\n对于每一个 j ，其都会成为下一个 j 枚举中的 i，只需要使用哈希表记录下当前 j 位置的值出现的次数，就能在 $ O(1) $ 的时间复杂度代价下求得 j 位置上构成数对的数目。\n1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution { public: int countKDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { unordered_map\u0026lt;int,int\u0026gt; mp; int ans = 0; for(auto \u0026amp;\u0026amp; j : nums){ ans += mp[k+j]; ans += mp[j-k]; mp[j]++; } return ans; } };   ","date":"2022-02-09T20:42:21+08:00","permalink":"https://blog.jhas.site/p/20220209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2006-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BAk%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/","title":"20220209 每日一题 Leetcode2006 差的绝对值为K的数对数目"}]