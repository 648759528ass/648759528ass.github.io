[{"content":"1020. 飞地的数量 题面 给你一个大小为 $m * n$ 的二进制矩阵 $grid$ ，其中 $0$ 表示一个海洋单元格、$1$ 表示一个陆地单元格。\n一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 $grid$ 的边界。\n返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。\n解析 题目非常白给，求无法 在任意次数的移动中离开网格边界的陆地单元格的数量，也即不与边界有相联的联通块，这时我们有两种思路：\n 从边界块出发，看看边界块延伸的最长块 从每一块陆地块出发，看看是否能到边界  两种情况正好对应了两种解法:\n 多源dfs/bfs 并查集  解法一 dfs和bfs在这题的情况下效果是一样的，首先记录下每一个边界陆地块，然后从边界陆地块出发搜索陆地块，如果可以碰到则把碰到的块1变为0，最后遍历grid标记其值为1的数量。\n由于我们每次碰到后都会把1标为0，所以每一个块实际入 栈/队列 次数为 $n*m$\n所以时间复杂度:$O(mn)$\n代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { int n = grid.size(); int m = grid[0].size(); queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; Q; for(int i = 0;i\u0026lt;m;i++){ if(grid[0][i]) Q.push({0,i}),grid[0][i] = 0; if(grid[n-1][i]) Q.push({n-1,i}),grid[n-1][i] = 0; } for(int i = 0;i\u0026lt;n;i++){ if(grid[i][0]) Q.push({i,0}),grid[i][0] = 0; if(grid[i][m-1]) Q.push({i,m-1}),grid[i][m-1] = 0; } while(!Q.empty()){ auto head = Q.front(); Q.pop(); for(int i = 0;i\u0026lt;4;i++){ int dx = head.first + tx[i]; int dy = head.second + ty[i]; if(dx\u0026gt;=0\u0026amp;\u0026amp;dx\u0026lt;n\u0026amp;\u0026amp;dy\u0026gt;=0\u0026amp;\u0026amp;dy\u0026lt;m\u0026amp;\u0026amp;grid[dx][dy]){ Q.push({dx,dy}); grid[dx][dy] = 0; } } } int ans = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j]) ans++; } } return ans; } };   解法二 其实在这题的情况下，并查集比dfs/bfs 时间复杂度高而且难写，所以一般不用(狗头),但是还是写出来\n首先这里用到一个二维压一维的操作，由于在并查集里位置信息并不重要，所以可以以 $ i*m+j $ 编码每一个块。另外地，为了标记一个块是否与边界联通，还需要一个额外的标记。\n首先遍历每一个块，若为陆地块则尝试和旁边陆地块合并。\n然后遍历每一个块，查找其顶层标记是否为边界标记\n时间复杂度: $ O(mn×\\alpha(mn)) $ $ \\alpha$为反阿克曼函数，为并查集查找的时间复杂度\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  class Union{ public: Union(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid){ int n = grid.size(); int m = grid[0].size(); u.resize(n*m); sign.resize(n*m,0); for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ u[i*m+j] = i*m+j; if(i == 0 || i == n-1 || j == 0||j == m-1){ sign[i*m+j] = grid[i][j]; } } } }; int find(int n){ return n == u[n]?n:u[n] = find(u[n]); }; int check(int n){ if(u[n] == n) return sign[n]; if(sign[n]) return 1; return sign[n] = check(u[n]); }; void merge(int n,int m){ int tn = find(n); int tm = find(m); if(tn != tm){ u[tn] = tm; sign[tm] = sign[tm] | sign[tn] | sign[n] | sign[m]; } } private: vector\u0026lt;int\u0026gt; u; vector\u0026lt;int\u0026gt; sign; }; class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { Union u(grid); int n = grid.size(); int m = grid[0].size(); for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j] == 0) continue; for(int k = 0;k\u0026lt;4;k++){ int dx = i + tx[k]; int dy = j + ty[k]; if(dx\u0026gt;=0\u0026amp;\u0026amp;dx\u0026lt;n\u0026amp;\u0026amp;dy\u0026gt;=0\u0026amp;\u0026amp;dy\u0026lt;m\u0026amp;\u0026amp;grid[dx][dy]) u.merge(i*m+j, dx*m+dy); } } } int ans = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j] == 0) continue; if(!u.check(i*m+j)) ans++; } } return ans; } };   ","date":"2022-02-12T09:50:17+08:00","permalink":"https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/","title":"20220212 每日一题 Leetcode1020 飞地的数量"},{"content":"1984. 学生分数的最小差值 题面 给你一个 下标从 0 开始 的整数数组 $nums$ ，其中 $nums[i]$ 表示第 $i$ 名学生的分数。另给你一个整数 $k$ 。\n从数组中选出任意 $k$ 名学生的分数，使这 $k$ 个分数间 最高分 和 最低分 的 差值 达到 最小化 。\n返回可能的 最小差值 。\n解析 若使$k$名学生的分数差值达到最小化，从$nums$取$k$个数，如果这$k$个数正好是最大最小数差值最小化，则$nums$必无其它数在这$k$个数之间。显然若使从$nums$取出任意$i$都满足从$i$后取$k$个数差值最小化，则数组必然有序。\n解法 将数组排序然后枚举$i$滑动窗口即可\n时间复杂度: $O( n \\log n)$\n1 2 3 4 5 6 7 8 9 10 11 12  class Solution { public: int minimumDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int i,n = nums.size(),ans; sort(nums.begin(),nums.end()); ans = 100010; for(i = k - 1;i\u0026lt;n;i++){ ans = min(ans,nums[i] - nums[i - k + 1]); } return ans; } };   ","date":"2022-02-11T12:56:58+08:00","permalink":"https://blog.jhas.site/p/20220211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1984-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/","title":"20220211 每日一题 Leetcode1984 学生分数的最小差值"},{"content":"二分搜素 简述 二分搜索是一种效率较高的查找方法，用于在有序(二段)数组内查找一个特定数。得益于有序(二段)数组的性质，每一次查找可以筛除一段数量大于一的数段(常见为$\\frac{n}{2} $),故能在$ O(\\log n) $的时间复杂度内找到对应答案。\n二分的本质是二段性而不是单调性\n应用 二分通常被用于一个有序数组查找一个数或一个位置，这个数通常是一个最小或最大值/位置(边界位置)。\n常见二分通常有两种：\n 整数二分 浮点二分  整数二分 整数二分通常查找一个范围的上界或下界\n比如说不超过/不低于某个数最大/最小的数的位置与其值。\n总的来说，查找的区间可以被分为两个部分，一个部分满足条件，另一部分不满足条件，答案则在两部分的交点。\n浮点二分 通常是函数求根、开方等问题，比较简单，while循环终止条件是精度e，更新时l和r都更新为mid即可。\n基本代码 整数二分有两种，一种是寻找上界(即寻找不符合性质的最后一个点)，一种是下界(即寻找符合性质的第一个点)\n整数二分上界 1 2 3 4 5 6 7 8 9 10  int bsearch(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; }   整数二分下界 1 2 3 4 5 6 7 8 9 10  int bsearch(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; else l = mid + 1; } return l; }   浮点二分则比较单调，通常是函数求根、开方等问题\n浮点二分 1 2 3 4 5 6 7 8 9 10 11 12  int main() { double n; cin \u0026gt;\u0026gt; n; double l = -10000, r = 10000, mid; while(r - l \u0026gt; 1e-7){ mid = (l + r) / 2; if(check(mid)) r = mid; else l = mid ; } printf(\u0026#34;%.6f\u0026#34;, l); }   STL STL里提供了lower_bound()和upper_bound()两个函数用于一个排好序的数组二分查找\nlower_bound:返回数组中第一个大于或等于被查数的迭代器\nupper_bound:返回数组中第一个大于被查数的迭代器\n1 2 3 4 5 6 7 8 9  int main(){ int num[6]={1,2,4,7,15,34}; sort(num.begin(),num.end()); int lower_idx = lower_bound(num.begin(),num.end(),4) - num.begin(); // 值为2，lower_bound返回了位置为2的迭代器  int upper_idx = upper_bound(num.begin(),num.end(),4) - num.begin(); // 值为3, upper_bound返回了位置为3的迭代器  sort(num.begin(),num.end(),greater\u0026lt;int\u0026gt;()); //从大到小排序,此时为 [34,15,7,4,2,1]  int greater_lower_idx = lower_bound(num.begin(),num.end(),4,greater\u0026lt;int\u0026gt;()) - num.begin();// 值为3,lower_bound返回了位置为3的迭代器,即查找到第一个小于或等于4的数  int greater_upper_idx = lower_bound(num.begin(),num.end(),4,greater\u0026lt;int\u0026gt;()) - num.begin();// 值为4,lower_bound返回了位置为4的迭代器,即查找到第一个小于4的数 }   这里不得不提到 greater() 和 less() 了\n其实其内部结构为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  template\u0026lt;class _Ty = void\u0026gt; struct less { // functor for operator\u0026lt;  typedef _Ty first_argument_type; typedef _Ty second_argument_type; typedef bool result_type; constexpr bool operator()(const _Ty\u0026amp; _Left, const _Ty\u0026amp; _Right) const { // apply operator\u0026lt; to operands  return (_Left \u0026lt; _Right); } }; template\u0026lt;class _Ty = void\u0026gt; struct greater { // functor for operator\u0026gt;  typedef _Ty first_argument_type; typedef _Ty second_argument_type; typedef bool result_type; constexpr bool operator()(const _Ty\u0026amp; _Left, const _Ty\u0026amp; _Right) const { // apply operator\u0026gt; to operands  return (_Left \u0026gt; _Right); } };   这是一个仿函数, 以greater()为例, greater()其实获得了一个匿名对象，而这个对象等效于\n1 2 3  bool cmp(const int\u0026amp; _Left, const int\u0026amp; _Right) const { return _Left \u0026gt; _Right }   或者\n1 2 3  [](const int\u0026amp; _Left, const int\u0026amp; _Right) -\u0026gt; bool { return _Left \u0026gt; _Right }   即一个比较函数\n回到二分查找的STL，下面是它们的源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  _ForwardIterator __lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp\u0026amp; __val, _Compare __comp) { typedef typename iterator_traits\u0026lt;_ForwardIterator\u0026gt;::difference_type _DistanceType; _DistanceType __len = std::distance(__first, __last); while (__len \u0026gt; 0) { _DistanceType __half = __len \u0026gt;\u0026gt; 1; _ForwardIterator __middle = __first; std::advance(__middle, __half); if (__comp(__middle, __val)) { __first = __middle; ++__first; __len = __len - __half - 1; } else __len = __half; } return __first; } _ForwardIterator __upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp\u0026amp; __val, _Compare __comp) { typedef typename iterator_traits\u0026lt;_ForwardIterator\u0026gt;::difference_type _DistanceType; _DistanceType __len = std::distance(__first, __last); while (__len \u0026gt; 0) { _DistanceType __half = __len \u0026gt;\u0026gt; 1; _ForwardIterator __middle = __first; std::advance(__middle, __half); if (__comp(__val, __middle)) __len = __half; else { __first = __middle; ++__first; __len = __len - __half - 1; } } return __first; }   主要的差别在于__comp()的用法，而__comp()又是我们的仿函数以less()为例，则差别在于lower_bound比较 $ mid \u0026lt; val$ 而upper_bound比较 $val \u0026lt; mid$\n对于 lower_bound来说，如果__comp()为true则将first设置为mid，否则将长度减少一半(STL里二分使用长度来表示)。\n对于 upper_bound来说，如果__comp()为true则将长度减少一半，否则将将first设置为mid，\n区别在于两个true表示的范围不一样，\n更直观的表示是，如果将upper_bound改写成以下形式\n1 2 3 4 5 6 7 8  if (!__comp(__val, __middle)){ __first = __middle; ++__first; __len = __len - __half - 1; } else{ __len = __half; }   其实是将if else切换一下\n这个时候$mid \u0026lt;= val$ 正巧比lower_bound多了个等号，即右范围涵盖了mid，这就是upper_bound与lower_bound的差别，\n总的来说，STL里的upper_bound与lower_bound其实实现的是整数二分下界，区别在于__comp的应用和二段的划分\n经典题目 Leetcode704. 二分查找\n标准二分查找\nacwing789. 数的范围\n二分边界查找(上界\\下界)\nacwing790. 数的三次方根\n二分浮点\nLeetcode1984. 学生分数的最小差值\n这个不是很经典，但是可以用二分答案做\n参考文章 AcWing 789. 数的范围（详细分析二分过程）\n二分查找算法模板\nAcWing 789. 二分模板笔记\nC++：greater和less\n关于lower_bound( )和upper_bound( )的常见用法\n","date":"2022-02-10T12:07:04+08:00","permalink":"https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/","title":"二分范围查找笔记"},{"content":"1447. 最简分数 题面 给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。\n解析 非常简单的暴力数论题，对于任意 $ i$ $j $ 来说，满足 $ 0\u0026lt; j/i \u0026lt;1 $ 即满足 $ j \u0026lt; i $ ,考虑到 $ 1\\leq n \\leq 100 $ 则只需暴力枚举每一个 $i$,$j$ 即可得出答案，对于任意$i$,$j$ ，满足$ j/i $为最简分数，即两数不可同时除以任意数且结果为整数，即两数互质，等价于 $ gcd(i,j) = 1 $\n解法 时间复杂度:$ O(n^2\\log n) $\n代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution { public: vector\u0026lt;string\u0026gt; simplifiedFractions(int n) { vector\u0026lt;string\u0026gt; ret; for(int i = 2;i\u0026lt;=n;i++){ for(int j = 1;j\u0026lt;i;j++){ if(__gcd(i,j) == 1){ ret.push_back(itoa(j)+\u0026#34;/\u0026#34;+itoa(i)); } } } return ret; } string itoa(int i){ if(i== 0) return \u0026#34;\u0026#34;; return itoa(i/10) + char(\u0026#39;0\u0026#39; + i%10); } };   ","date":"2022-02-10T08:40:23+08:00","permalink":"https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/","title":"20220210 每日一题 Leetcode1447 最简分数"},{"content":"2006. 差的绝对值为 K 的数对数目 题面 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i \u0026lt; j 且 |nums[i] - nums[j]| == k 。\n|x| 的值定义为：\n如果 x \u0026gt;= 0 ，那么值为 x 。 如果 x \u0026lt; 0 ，那么值为 -x 。\n解析 题目非常白给，照着题目意思顺下去分析即可\n对于 $$ |nums[i] - nums[j]| = k $$ 拆解后有两种可能 $$ nums[i] = k + nums[j] $$ 与 $$ nums[i] = nums[j] - k $$ 既对于任意 $ j $ 只需要统计到 $ i\u0026lt;j $ 的数目即可\n解法一 时间复杂度 $ O(n^2)$\n空间复杂度 $ O(1) $\n暴力枚举每一个j与i，检查是否正确\n解法二 时间复杂度 $ O(n) $\n空间复杂度 $ O(n) $\n对于每一个 j ，其都会成为下一个 j 枚举中的 i，只需要使用哈希表记录下当前 j 位置的值出现的次数，就能在 $ O(1) $ 的时间复杂度代价下求得 j 位置上构成数对的数目。\n1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution { public: int countKDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { unordered_map\u0026lt;int,int\u0026gt; mp; int ans = 0; for(auto \u0026amp;\u0026amp; j : nums){ ans += mp[k+j]; ans += mp[j-k]; mp[j]++; } return ans; } };   ","date":"2022-02-09T20:42:21+08:00","permalink":"https://blog.jhas.site/p/20220209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2006-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BAk%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/","title":"20220209 每日一题 Leetcode2006 差的绝对值为K的数对数目"}]