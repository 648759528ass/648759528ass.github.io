[{"content":"917. 仅仅反转字母 题面 给你一个字符串 s ，根据下述规则反转字符串：\n 所有非英文字母保留在原有位置。 所有英文字母（小写或大写）位置反转。  返回反转后的 s 。\n解析 按题面双指针模拟即可。\n有点像快排里的交换(部分像)。\n每个用了的指针向前/向后一位,碰到不是字母的指针也移动.\n解法 时间复杂度:$ O(n) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution { public: string reverseOnlyLetters(string s) { int l=0,r = s.size(); while(l\u0026lt;r){ if((s[l]\u0026lt;\u0026#39;A\u0026#39;||s[l]\u0026gt;\u0026#39;Z\u0026#39;)\u0026amp;\u0026amp;(s[l]\u0026lt;\u0026#39;a\u0026#39;||s[l]\u0026gt;\u0026#39;z\u0026#39;)){ l++; } else if((s[r]\u0026lt;\u0026#39;A\u0026#39;||s[r]\u0026gt;\u0026#39;Z\u0026#39;)\u0026amp;\u0026amp;(s[r]\u0026lt;\u0026#39;a\u0026#39;||s[r]\u0026gt;\u0026#39;z\u0026#39;)){ r--; }else{ swap(s[l++], s[r--]); } } return s; } };   ","date":"2022-02-23T09:30:22+08:00","permalink":"https://blog.jhas.site/p/20220223-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode917-%E4%BB%85%E4%BB%85%E5%8F%8D%E8%BD%AC%E5%AD%97%E6%AF%8D/","title":"20220223 每日一题 Leetcode917 仅仅反转字母"},{"content":"1994. 好子集的数目 题面 给你一个整数数组 $nums$ 。如果 $nums$ 的一个子集中，所有元素的乘积可以表示为一个或多个 互不相同的质数 的乘积，那么我们称它为 好子集 。\n比方说，如果 $nums$ = $[1, 2, 3, 4]$ ： $[2, 3]$ ，$[1, 2, 3]$ 和 $[1, 3]$ 是 好 子集，乘积分别为 $6 = 23$ ，$6 = 23$ 和 $3 = 3$ 。 $[1, 4]$ 和 $[4]$ 不是 好 子集，因为乘积分别为 $4 = 22$ 和 $4 = 22$ 。 请你返回 $nums$ 中不同的 好 子集的数目对 $10^9 + 7$ 取余 的结果。\n$nums$ 中的 子集 是通过删除 $nums$ 中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。\n解析 今天这道hard题又看答案了，果然hard做得还是比较勉强。\n首先这道题解法是状压dp，没有学过的(包括我)可能挺难想到的\n针对1-30中每一个数，都可以在下面这三类中分出来:\n 1 {4,8,9,12,16,18,20,24,25,27,28} 这些是完全平方数或者因子中有完全平方的数 剩下的数  然后看30中的质数{2,3,5,7,11,13,17,19,23,29}。共有10个\n我们枚举2-30中的每一个数，每个数设为i\n我们可以拿一个十位的二进制数j，当其某一位为1时，即代表已存在对应的质数\n$dp[i][j]$的含义为在$[2,i]$的这个区间内，乘积为$j$中质数的乘积的数量\n设subset为 i 的质数分解后对应的十位二进制, cnt[i]为nums中i的数量.\n则有以下dp方程\n$ dp[i][j] = dp[i-1][j] ,i \\in {4,8,9,12,16,18,20,24,25,27,28} | subset\\notin j $ $ dp[i][j] = dp[i-1][j] + dp[i-1][j-subset] * cnt[i], i \\notin {1,4,8,9,12,16,18,20,24,25,27,28} $ $ dp[1][0] = 2^{cnt[1]} $\n需要注意的是 subset 必须为j的子集，可以用按位与来处理\n虽然i最大为30，但我们也可以用01背包把它压缩成一维\n解法 时间复杂度:$O(30*1024 + n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  const int mod = 1000000007; const int odd[] = {2,3,5,7,11,13,17,19,23,29}; const int db[] = {4,8,9,12,16,18,20,24,25,27,28}; const int N = 1\u0026lt;\u0026lt;10; class Solution { public: inline int judge(const int\u0026amp; a){ for(int i = 0;i\u0026lt;11;i++){ if(db[i] == a) return true; } return false; } int numberOfGoodSubsets(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int mp[31]; long long int dp[N]; memset(dp,0,sizeof(dp)); memset(mp,0,sizeof(mp)); for(auto \u0026amp;a : nums){ mp[a]++; } dp[0] = 1; for(int i = 0;i\u0026lt;mp[1];i++){ dp[0]*=2; dp[0]%=mod; } for(int i = 2;i\u0026lt;=30;i++){ if(judge(i)) continue; int subset = 0; for(int j = 0;j\u0026lt;10;j++){ if(i%odd[j] == 0) subset += 1\u0026lt;\u0026lt;j; } for(int j = 0;j\u0026lt;N;j++){ if((subset \u0026amp; j) != subset) continue; dp[j] = (dp[j]+dp[j-subset]*mp[i])%mod; } } int ans = 0; for(int i = 1;i\u0026lt;N;i++){ ans = (ans +dp[i])%mod; } return ans; } };   ","date":"2022-02-22T14:47:07+08:00","permalink":"https://blog.jhas.site/p/20220222-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1994-%E5%A5%BD%E5%AD%90%E9%9B%86%E7%9A%84%E6%95%B0%E7%9B%AE/","title":"20220222 每日一题 Leetcode1994 好子集的数目"},{"content":"838. 推多米诺 题面 $n$ 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。\n每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。\n如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。\n就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。\n给你一个字符串 $dominoes$ 表示这一行多米诺骨牌的初始状态，其中：\n  $dominoes[i]$ = \u0026lsquo;L\u0026rsquo;，表示第 $i$ 张多米诺骨牌被推向左侧，\n  $dominoes[i]$ = \u0026lsquo;R\u0026rsquo;，表示第 $i$ 张多米诺骨牌被推向右侧，\n  $dominoes[i]$ = \u0026lsquo;.'，表示没有推动第 $i$ 张多米诺骨牌。\n  返回表示最终状态的字符串。\n解析 本题有两种思路：\n bfs搜索 双指针模拟  bfs搜索 简单说一下bfs搜索的思路，对于每一个推倒的多米诺，必然会引起连锁反应引起其它多米诺倒下。维护一个队列。队列里元素为$(i)$ 再开一个数组记录当前多米诺的状态:访问?未访问。\n对于每个倒下的多米诺，其一定不会对已访问的多米诺产生影响，对于一开始已经倒下的多米诺记为已访问。同时对于每次访问的多米诺，仅仅只在其被取出为队头时才记录为访问。\n再次对于每个倒下的多米诺，其影响一定是左边或右边，修改其对应影响的未访问的多米诺的状态，当一个多米诺同时被两边访问(未被访问但已经为L或R)时，该多米诺为直立。\n以上情况直到队列空为止\n双指针模拟 对于每一个倒下的多米诺都会影响一个一个区间。只要用双指针模拟这个区间即可\n解法 双指针模拟\n时间复杂度: $O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  class Solution { public: string pushDominoes(string dominoes) { int l = 0; for(int i = 0;i\u0026lt;dominoes.size();i++){ if(dominoes[i] == \u0026#39;L\u0026#39;){ if(dominoes[l] == \u0026#39;R\u0026#39;){ for(int j = 0;j\u0026lt;=(i-l)/2;j++){ if(l+j == i-j){ continue; } dominoes[l+j] = \u0026#39;R\u0026#39;; dominoes[i-j] = \u0026#39;L\u0026#39;; } }else{ while(l\u0026lt;=i){ dominoes[l++] = \u0026#39;L\u0026#39;; } } l = i+1; }else if(dominoes[i] == \u0026#39;R\u0026#39;){ if(dominoes[l] == \u0026#39;R\u0026#39;){ while(l\u0026lt;i){ dominoes[l++] = \u0026#39;R\u0026#39;; } } l = i; } } if(dominoes[l] == \u0026#39;R\u0026#39;){ while(l\u0026lt;dominoes.size()) dominoes[l++] = \u0026#39;R\u0026#39;; } return dominoes; } };   ","date":"2022-02-21T11:12:29+08:00","permalink":"https://blog.jhas.site/p/20220221-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode838-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/","title":"20220221 每日一题 Leetcode838 推多米诺"},{"content":"717. 1比特与2比特字符 题面 有两种特殊字符：\n  第一种字符可以用一个比特 0 来表示\n  第二种字符可以用两个比特(10 或 11)来表示\n  给定一个以 0 结尾的二进制数组 bits ，如果最后一个字符必须是一位字符，则返回 true 。\n解析 简简单单模拟即可\n解法 时间复杂度: $ O(n) $\n1 2 3 4 5 6 7 8 9 10  class Solution { public: bool isOneBitCharacter(vector\u0026lt;int\u0026gt;\u0026amp; bits) { for(int i = 0;i\u0026lt;bits.size();i++){ if(i == bits.size() - 1) return true; if(bits[i] == 1) i++; } return false; } };   ","date":"2022-02-20T10:55:44+08:00","permalink":"https://blog.jhas.site/p/20220220-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode717-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6/","title":"20220220 每日一题 Leetcode717 1比特与2比特字符"},{"content":"969. 煎饼排序 题面 给你一个整数数组 $arr$ ，请使用 煎饼翻转 完成对数组的排序。\n一次煎饼翻转的执行过程如下：\n 选择一个整数 $k$ ，$1 \\le k \\le arr.length$ 反转子数组 $arr[0\u0026hellip;k-1]$（下标从 0 开始）  例如，$arr = [3,2,1,4]$ ，选择 $k = 3$ 进行一次煎饼翻转，反转子数组 $[3,2,1]$ ，得到 $arr = [1,2,3,4]$ 。\n以数组形式返回能使 $arr$ 有序的煎饼翻转操作所对应的 $k$ 值序列。任何将数组排序且翻转次数在 $10 * arr.length$ 范围内的有效答案都将被判断为正确。\n解析 考虑一下每次都将某个下标翻到第一位，然后将它再翻到它对应的位置，操作次数只需 $2 * arr.length$即可\n又有如果我们要让每一次翻面不会搞乱前面的翻面，则我们应该从右往左翻。枚举每一个值即可。\n代码 时间复杂度:$ O(n^2) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Solution { public: vector\u0026lt;int\u0026gt; pancakeSort(vector\u0026lt;int\u0026gt;\u0026amp; arr) { int n = arr.size(); vector\u0026lt;int\u0026gt; ret; for(int i = n;i\u0026gt;=1;i--){ auto t = arr.begin(); for(;t!=arr.end();t++){ if(*t == i){ ret.push_back(t-arr.begin() + 1); ret.push_back(i); reverse(arr.begin(),t+1); reverse(arr.begin(),arr.begin()+i); break; } } } return ret; } };   ","date":"2022-02-19T09:21:44+08:00","permalink":"https://blog.jhas.site/p/20220219-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode969-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/","title":"20220219 每日一题 Leetcode969 煎饼排序"},{"content":"1791. 找出星型图的中心节点 题面 有一个无向的 星型 图，由 n 个编号从 1 到 n 的节点组成。星型图有一个 中心 节点，并且恰有 n - 1 条边将中心节点与其他每个节点连接起来。\n给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示在节点 ui 和 vi 之间存在一条边。请你找出并返回 edges 所表示星型图的中心节点。\n解析 这题太白给了，恰有n-1条边代表每个edge数组内都有一个相等的值\n则只需要比较第一第二个数组即可\n做法 时间复杂度: $ O(1) $\n1 2 3 4 5 6 7 8 9  class Solution { public: int findCenter(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; edges) { if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]){ return edges[0][0]; } return edges[0][1]; } };   ","date":"2022-02-18T08:37:24+08:00","permalink":"https://blog.jhas.site/p/20220218-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1791-%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9/","title":"20220218 每日一题 Leetcode1791 找出星型图的中心节点"},{"content":"688. 骑士在棋盘上的概率 题面 在一个 $n * n$ 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 $k$ 次移动。行和列是 从 $0$ 开始 的，所以左上单元格是 $(0,0)$ ，右下单元格是 $(n - 1, n - 1)$ 。\n象棋骑士有$8$种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。\n每次骑士要移动时，它都会随机从$8$种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。\n骑士继续移动，直到它走了 $k$ 步或离开了棋盘。\n返回 骑士在棋盘停止移动后仍留在棋盘上的概率 。\n解析 由于对于每一次的移动，其到某格的概率为该格其八个方向到该格的概率，则设dp方程为 $$ dp[0][row][column] = 1\\ dp[k][i][j] = \\sum_{n=0}^7 dp[k-1][i+x_n][j+y_n] * \\frac{1}{8}\\ $$ 其中 $$ x[8] = {-2,-2,-1,-1,1,1,2,2};\\ y[8] = {-1,1,2,-2,2,-2,-1,1};\\ $$ 最后统计$dp[k]$中所有值的和，即为最后留在棋盘上的概率\n同时由于每一层的dp仅依赖于上一层的dp，故可以用奇偶性来压缩数组大小\n代码 时间复杂度:$ O(k*n^2) $\n空间复杂度:$ O(n^2) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class Solution { public: double dp[2][25][25]; int tx[8] = {-2,-2,-1,-1,1,1,2,2}; int ty[8] = {-1,1,2,-2,2,-2,-1,1}; double knightProbability(int n, int k, int row, int column) { dp[0][row][column] = 1.0; for(int t = 1;t\u0026lt;=k;t++){ for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;n;j++){ double cnt = 0; for(int l = 0;l\u0026lt;8;l++){ int dx = i+tx[l]; int dy = j+ty[l]; if(dx\u0026lt;0||dx\u0026gt;=n||dy\u0026lt;0||dy\u0026gt;=n) continue; cnt += dp[(t-1)\u0026amp;1][dx][dy] * 1.0/8.0; } dp[t\u0026amp;1][i][j] = cnt; } } } double cnt = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;n;j++){ cnt += dp[k\u0026amp;1][i][j]; } } return cnt; } };   ","date":"2022-02-17T00:05:45+08:00","permalink":"https://blog.jhas.site/p/20220217-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/","title":"20220217 每日一题 Leetcode688 骑士在棋盘上的概率"},{"content":"1719. 重构一棵树的方案数 今天这道题前前后后看了两小时，最后忍不住看答案了\n题面 给你一个数组 $pairs$ ，其中 $pairs[i] = [x_i, y_i]$ ，并且满足：\n $pairs$ 中没有重复元素 $xi \u0026lt; yi$  令 $ways$ 为满足下面条件的有根树的方案数：\n 树所包含的所有节点值都在 $pairs$ 中。 一个数对 $[xi, yi]$ 出现在 $pairs$ 中 当且仅当 $x_i$ 是 $y_i$ 的祖先或者 $y_i$ 是 $x_i$ 的祖先。 注意：构造出来的树不一定是二叉树。 两棵树被视为不同的方案当存在至少一个节点在两棵树中有不同的父节点。  请你返回：\n如果 $ways == 0$，返回0。 如果 $ways == 1$，返回1。 如果 $ways \u0026gt; 1 $ ，返回 2 。\n一棵 有根树 指的是只有一个根节点的树，所有边都是从根往外的方向。\n我们称从根到一个节点路径上的任意一个节点（除去节点本身）都是该节点的 祖先 。根节点没有祖先。\n解析 注意题面的当且仅当，故有以下结论\n 每一个能够成为根节点的值，必然与其它节点的值构成一个$pair$ 对于该树以及其子树，每一个节点的父节点的度都 大于或等于其子节点的度 每一个子节点的邻接节点集都为父节点的子集  则对于重构一颗树，我们可以先确定其根节点的值，然后枚举剩下的节点，确定其父节点的值，然后检查父节点值成立\n对于每一个父节点值，考虑到父节点的父节点的度必然大于或等于父节点的度，则有以下寻找父节点的规则:选取与当前节点邻接且节点度为最小的大于或等于当前节点度的节点\n然后对于每一个节点度都需要检查当前节点除去父节点的邻接节点集合是否为父节点邻接节点集合的子集\n对于每一个父节点和子节点，若其度相等，则可以互换,由于其度相等，也即两个集合除去其对应的节点剩下节点都相同，又有在数对中x，y可以互换。故父节点和子节点可以互换，此时方案数大于1。\n如果不存在上述节点，但是每个节点(除根节点)都可以确定合适的父节点，则方案数为1\n否则方案数为0\n解法 时间复杂度:$ O(m + n^2)$\n空间复杂度:$ O(m) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  class Solution { public: int checkWays(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; pairs) { unordered_map\u0026lt;int,unordered_set\u0026lt;int\u0026gt;\u0026gt; adj; int ans = 0; for(auto \u0026amp;v : pairs){ adj[v[0]].emplace(v[1]); adj[v[1]].emplace(v[0]); } int n = adj.size(); int root = -1; for(auto \u0026amp;[k,v] : adj){ if(v.size() == n-1){ root = k; break; } } if(root == -1) return 0; for(auto \u0026amp;[k,neighbors] : adj){ if(k == root) continue; int curDegree = neighbors.size(); int parent = -1; int parentDegree = INT_MAX; for(auto \u0026amp;neighbor : neighbors){ if(adj[neighbor].size()\u0026gt;=curDegree\u0026amp;\u0026amp;adj[neighbor].size()\u0026lt;=parentDegree){ parent = neighbor; parentDegree = adj[neighbor].size(); } } if(parent == -1) return 0; for(auto \u0026amp;neighbor : neighbors){ if(neighbor == parent) continue; if(adj[parent].find(neighbor) == adj[parent].end()){ return 0; } } if(parentDegree == curDegree) ans = max(ans,2); else ans = max(ans,1); } return ans; } };   另附一份非常漂亮的解法,用时仅237ms,是leetcode最好的用时样例了\n首先它直接将节点按度排序，然后根据以上性质，度比较大的节点总是度比较小节点的父节点，故对每个节点，只需要逆序遍历即可确定父节点及祖先节点。然后再次对每个节点，确定比它后的节点的联通性以及其是否在节点链上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  class Solution { public: // 思路有  int checkWays(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; pairs) { int maxn = 0; for(auto\u0026amp; p : pairs) maxn = max(maxn, max(p[0], p[1])); // 求出关系数,初始化关系矩阵(conn)  int deg[maxn + 1], conn[maxn + 1][maxn + 1]; memset(deg, 0, sizeof(deg)); memset(conn, 0, sizeof(conn)); for(auto\u0026amp; p : pairs) { conn[p[0]][p[1]] = conn[p[1]][p[0]] = 1; deg[p[0]]++, deg[p[1]]++; } // 求出实际点数 n  int nodes[maxn + 1], n = 0; for(int i = 1; i \u0026lt;= maxn; ++i) if(deg[i]) nodes[n++] = i; // 按照 \u0026#34;关系数\u0026#34; 从大到小排序  sort(nodes, nodes + n, [\u0026amp;](int a, int b) { return deg[a] \u0026gt; deg[b]; }); // 根节点必须是其它节点的祖先  if(deg[nodes[0]] != n-1) return 0; // 寻找父节点 (fa) 和祖先节点 (all_fa)  int fa[maxn + 1], all_fa[maxn + 1][maxn + 1]; memset(fa, 0, sizeof(fa)); memset(all_fa, 0, sizeof(all_fa)); for(int i = 0; i \u0026lt; n; ++i) { for(int j = i-1; j \u0026gt;= 0; --j) { if(conn[nodes[i]][nodes[j]]) { fa[nodes[i]] = nodes[j]; for(int f = fa[nodes[i]]; f; f = fa[f]) all_fa[nodes[i]][f] = 1; break; } } } // 根据题目定义判断即可  int res = 1; for(int i = 1; i \u0026lt;= maxn; ++i) { for(int j = i + 1; j \u0026lt;= maxn; ++j) { if(conn[i][j] \u0026amp;\u0026amp; deg[i] == deg[j]) res = 2; // 判断是否有多个解  if(conn[i][j] != (all_fa[i][j] || all_fa[j][i])) return 0; // 判断是否违反题目要求  } } return res; } };   ","date":"2022-02-16T10:18:20+08:00","permalink":"https://blog.jhas.site/p/20220216-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1719-%E9%87%8D%E6%9E%84%E4%B8%80%E9%A2%97%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/","title":"20220216 每日一题 Leetcode1719 重构一颗树的方案数"},{"content":"1380. 矩阵中的幸运数 题面 给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。\n幸运数是指矩阵中满足同时下列两个条件的元素：\n在同一行的所有元素中最小 在同一列的所有元素中最大\n解析 模拟就完事了\n代码 时间复杂度: $ O(nm) $\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  class Solution { public: bool r[51],c[51]; vector\u0026lt;int\u0026gt; luckyNumbers (vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { int n = matrix.size(); int m = matrix[0].size(); vector\u0026lt;int\u0026gt; ans; auto judge = [\u0026amp;](int x,int y) -\u0026gt; bool{ if(r[y] || c[x]) return false; int t = matrix[x][y]; for(int i = 0;i\u0026lt;n;i++){ if(i == x) continue; if(matrix[i][y] \u0026gt;= t) return false; } for(int i = 0;i\u0026lt;m;i++){ if(i == y) continue; if(matrix[x][i] \u0026lt;= t) return false; } r[y] = true; c[x] = true; return true; }; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(judge(i,j)) ans.push_back(matrix[i][j]); } } return ans; } };   ","date":"2022-02-15T01:37:58+08:00","permalink":"https://blog.jhas.site/p/20220215-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1380-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0/","title":"20220215 每日一题 Leetcode1380 矩阵中的幸运数"},{"content":"540. 有序数组中的单一元素 题面 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。\n请你找出并返回只出现一次的那个数。\n你设计的解决方案必须满足 $O(\\log n)$ 时间复杂度和 $O(1)$ 空间复杂度。\n呜呜呜，破防了。我就是这个单一元素吧QAQ\n解析 如果不在意题的$ O(\\log n) $特殊要求的话，其实可以直接对整个数组异或和即可得到这单一元素(成双成对的元素都各自领走自己的另一半出去约会去了，就剩这单一元素QAQ)\n回到题面上，按着题面的$O(\\log n)$要求的话则是需要用到二分。属于是一道非常经典的二段性分析的题。\n假设单一元素的下标为 $ k $ , 则有下列条件\n设$ \\forall i \\in N, 2i \u0026lt; k $\n那么有 $ nums[2i] == nums[2i+1] $\n且对于$ \\forall i \\in N, 2i \u0026gt; k $\n有$ nums[2i] == nums[2i-1] $\n可以说$nums[k]$干扰了成对数组的序列，使其的规律改变，使数组的性质变成了二段。\n至此其实已经分析完毕了一种做法:对偶数下标进行二分。\n为了减少代码量，我们将偶数做法扩展到自然数做法。\n设$ \\forall i \\in N , i \u0026lt; k$\n若$i$为奇数则$nums[i] == nums[i-1]$\n若$i$为偶数则$ nums[i] == nums[i+1] $\n对于$i\u0026gt;k$ 上述情况相反\n我们再考虑 $i \\oplus 1$ 的情况，若$i$为奇数 $i \\oplus 1 = i - 1$,偶数则$ i \\oplus 1 = i + 1 $\n即将上述情况合并为\n$ nums[i] == nums[i \\oplus 1] $\n解法一 时间复杂度:$ O(n) $\n非常暴力\n1 2 3 4 5 6 7 8 9 10  class Solution { public: int singleNonDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int ans = 0; for_each(nums.begin(),nums.end(),[\u0026amp;](auto \u0026amp; n){ ans^=n; }); return ans; } };   解法二 时间复杂度:$ O(\\log n) $\n对于任意数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution { public: int singleNonDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int l = 0,r = nums.size()-1; while(l\u0026lt;r){ int mid = (r+l)\u0026gt;\u0026gt;1; if(nums[mid] != nums[mid ^ 1]){ r = mid; }else{ l = mid +1; } } return nums[l]; } };   对于偶数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Solution { public: int singleNonDuplicate(vector\u0026lt;int\u0026gt;\u0026amp; nums) { nums.push_back(nums.back()+1); int l = 0,r = nums.size()/2-1; while(l\u0026lt;r){ int mid = (r+l)\u0026gt;\u0026gt;1; if(nums[mid*2] != nums[mid*2 + 1]){ r = mid; }else{ l = mid + 1; } } return nums[l*2]; } };   ","date":"2022-02-14T07:48:38+08:00","permalink":"https://blog.jhas.site/p/20220214-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/","title":"20220214 每日一题 Leetcode540 有序数组中的单一元素"},{"content":"Leetcode第280场周赛 6004. 得到 0 的操作数 题面 给你两个 非负 整数 num1 和 num2 。\n每一步 操作 中，如果 num1 \u0026gt;= num2 ，你必须用 num1 减 num2 ；否则，你必须用 num2 减 num1 。\n解析 没啥好说的，模拟就完事了。更相减损术\n解法 1 2 3 4 5 6 7 8  class Solution { public: int countOperations(int num1, int num2) { if(num1 == 0 || num2 == 0) return 0; if(num1\u0026gt;=num2) return 1 + countOperations(num2,num1-num2); return 1 + countOperations(num1,num2-num1); } };   6005. 使数组变成交替数组的最少操作数 题面 给你一个下标从 0 开始的数组 nums ，该数组由 n 个正整数组成。\n如果满足下述条件，则数组 nums 是一个 交替数组 ：\nnums[i - 2] == nums[i] ，其中 2 \u0026lt;= i \u0026lt;= n - 1 。 nums[i - 1] != nums[i] ，其中 1 \u0026lt;= i \u0026lt;= n - 1 。 在一步 操作 中，你可以选择下标 i 并将 nums[i] 更改 为 任一 正整数。\n返回使数组变成交替数组的 最少操作数 。\n解析 贪心的思想，只需要把数组拆分成奇数数组和偶数数组，然后统计两个数组各个数字出现次数，选取最大的出现即可，主要是注意最大的数字相等的情况，当最大数字相等时，只需要把最大数字和另一次大数字相加，比较不相等的数量。\n解法 时间复杂度:$O(n\\log n)$ 偷懒用了优先队列，可以是$ O(n) $的时间复杂度\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  class Solution { public: int minimumOperations(vector\u0026lt;int\u0026gt;\u0026amp; nums) { unordered_map\u0026lt;int,int\u0026gt; m1,m2; for(int i = 0;i\u0026lt;nums.size();i++){ if(i%2 == 1){ ++m1[nums[i]]; } else{ ++m2[nums[i]]; } } priority_queue \u0026lt;pair\u0026lt;int,int\u0026gt;,vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt;,less\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt;\u0026gt;q1,q2; for(auto \u0026amp;[k,v] : m1){ q1.push({v,k}); } for(auto \u0026amp;[k,v] : m2){ q2.push({v,k}); } if(q1.empty()||q2.empty()) return 0; if(q1.top().second == q2.top().second){ int t1 = q1.top().first; int t2 = q2.top().first; q1.pop(); q2.pop(); t1 += q2.empty()?0:q2.top().first; t2 += q1.empty()?0:q1.top().first; return nums.size() - max(t1,t2); } int a = q1.empty()?0:q1.top().first; int b = q2.empty()?0:q2.top().first; int ans = nums.size() - a - b; return ans ; } };   6006. 拿出最少数目的魔法豆 题面 给你一个 正 整数数组 beans ，其中每个整数表示一个袋子里装的魔法豆的数目。\n请你从每个袋子中 拿出 一些豆子（也可以 不拿出），使得剩下的 非空 袋子中（即 至少 还有 一颗 魔法豆的袋子）魔法豆的数目 相等 。一旦魔法豆从袋子中取出，你不能将它放到任何其他的袋子中。\n请你返回你需要拿出魔法豆的 最少数目。\n解析 简简单单排序然后比较,排完序后对于每一个位置$i$，都有若取这个位置$i$的数作为基准,应该减少的豆子为$ total - beans[i]*(size - i) $ 其中$ total $为豆子的总量，$size$为袋子的数目\n解法 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution { public: long long minimumRemoval(vector\u0026lt;int\u0026gt;\u0026amp; beans) { long long ans = LLONG_MAX; sort(beans.begin(),beans.end()); int n = beans.size(); long long cnt = 0; for_each(beans.begin(),beans.end(),[\u0026amp;](int \u0026amp;a){ cnt+=a; }); for(int i = 0;i\u0026lt;beans.size();i++){ long long mans = cnt - beans[i]*(long long)(n-i); ans = min(ans,mans); } return ans; } };   6007. 数组的最大与和 题面 给你一个长度为 n 的整数数组 nums 和一个整数 numSlots ，满足2 * numSlots \u0026gt;= n 。总共有 numSlots 个篮子，编号为 1 到 numSlots 。\n你需要把所有 n 个整数分到这些篮子中，且每个篮子 至多 有 2 个整数。一种分配方案的 与和 定义为每个数与它所在篮子编号的 按位与运算 结果之和。\n比方说，将数字 [1, 3] 放入篮子 1 中，[4, 6] 放入篮子 2 中，这个方案的与和为 (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4 。 请你返回将 nums 中所有数放入 numSlots 个篮子中的最大与和。\n解析 待补题\n解法 待补题\n","date":"2022-02-13T12:14:10+08:00","permalink":"https://blog.jhas.site/p/20220213-leetcode280%E5%91%A8%E8%B5%9B/","title":"20220213 Leetcode280周赛"},{"content":"1189. “气球” 的最大数量 题面 给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 \u0026ldquo;balloon\u0026rdquo;（气球）。\n字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 \u0026ldquo;balloon\u0026rdquo;。\n解析 超级白给题,直接记录每一个小写字母大小，然后对应字母数量除以每个字母数量取最小值即可。\n解法 时间复杂度:$O(n)$\n1 2 3 4 5 6 7 8 9 10 11 12  class Solution { public: int maxNumberOfBalloons(string text) { int st[26] = {}; for(auto \u0026amp; c : text){ st[c - \u0026#39;a\u0026#39;]++; } st[\u0026#39;l\u0026#39; - \u0026#39;a\u0026#39;]/=2; st[\u0026#39;o\u0026#39; - \u0026#39;a\u0026#39;]/=2; return min(min(st[\u0026#39;b\u0026#39; - \u0026#39;a\u0026#39;],min(st[\u0026#39;l\u0026#39; - \u0026#39;a\u0026#39;],st[\u0026#39;o\u0026#39; - \u0026#39;a\u0026#39;])),min(st[0],st[\u0026#39;n\u0026#39; - \u0026#39;a\u0026#39;])); } };   如果将balloon扩展到任意字符串，则为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Solution { public: int maxNumberOfBalloons(string text) { return maxNumberOfAnyString(text, \u0026#34;balloon\u0026#34;); // 在leetcode上提交的时候还少打了个o，直接wa了一发  } int maxNumberOfAnyString(string text,string target){ int c_text[26] = {},c_target[26] = {}; for(auto \u0026amp; c : text){ c_text[c - \u0026#39;a\u0026#39;]++; } for(auto \u0026amp; c : target){ c_target[c - \u0026#39;a\u0026#39;]++; } for(int i = 0;i\u0026lt;26;i++){ if(c_target[i] == 0){ c_text[i] = INT_MAX; }else{ c_text[i]/=c_target[i]; } } return *min_element(c_text,c_text+26); } };   或许你会很奇怪为什么2月13号的每日一题2月12号就做了，因为我明天要出去玩\u0026lt;-_\u0026lt;- ps:leetcode每日一题是可以提前看到的\n","date":"2022-02-12T23:06:52+08:00","permalink":"https://blog.jhas.site/p/20220213-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1189-%E6%B0%94%E7%90%83%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F/","title":"20220213 每日一题 Leetcode1189 气球的最大数量"},{"content":"1020. 飞地的数量 题面 给你一个大小为 $m * n$ 的二进制矩阵 $grid$ ，其中 $0$ 表示一个海洋单元格、$1$ 表示一个陆地单元格。\n一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 $grid$ 的边界。\n返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。\n解析 题目非常白给，求无法 在任意次数的移动中离开网格边界的陆地单元格的数量，也即不与边界有相联的联通块，这时我们有两种思路：\n 从边界块出发，看看边界块延伸的最长块 从每一块陆地块出发，看看是否能到边界  两种情况正好对应了两种解法:\n 多源dfs/bfs 并查集  解法一 dfs和bfs在这题的情况下效果是一样的，首先记录下每一个边界陆地块，然后从边界陆地块出发搜索陆地块，如果可以碰到则把碰到的块1变为0，最后遍历grid标记其值为1的数量。\n由于我们每次碰到后都会把1标为0，所以每一个块实际入 栈/队列 次数为 $n*m$\n所以时间复杂度:$O(mn)$\n代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { int n = grid.size(); int m = grid[0].size(); queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; Q; for(int i = 0;i\u0026lt;m;i++){ if(grid[0][i]) Q.push({0,i}),grid[0][i] = 0; if(grid[n-1][i]) Q.push({n-1,i}),grid[n-1][i] = 0; } for(int i = 0;i\u0026lt;n;i++){ if(grid[i][0]) Q.push({i,0}),grid[i][0] = 0; if(grid[i][m-1]) Q.push({i,m-1}),grid[i][m-1] = 0; } while(!Q.empty()){ auto head = Q.front(); Q.pop(); for(int i = 0;i\u0026lt;4;i++){ int dx = head.first + tx[i]; int dy = head.second + ty[i]; if(dx\u0026gt;=0\u0026amp;\u0026amp;dx\u0026lt;n\u0026amp;\u0026amp;dy\u0026gt;=0\u0026amp;\u0026amp;dy\u0026lt;m\u0026amp;\u0026amp;grid[dx][dy]){ Q.push({dx,dy}); grid[dx][dy] = 0; } } } int ans = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j]) ans++; } } return ans; } };   解法二 其实在这题的情况下，并查集比dfs/bfs 时间复杂度高而且难写，所以一般不用(狗头),但是还是写出来\n首先这里用到一个二维压一维的操作，由于在并查集里位置信息并不重要，所以可以以 $ i*m+j $ 编码每一个块。另外地，为了标记一个块是否与边界联通，还需要一个额外的标记。\n首先遍历每一个块，若为陆地块则尝试和旁边陆地块合并。\n然后遍历每一个块，查找其顶层标记是否为边界标记\n时间复杂度: $ O(mn×\\alpha(mn)) $ $ \\alpha$为反阿克曼函数，为并查集查找的时间复杂度\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  class Union{ public: Union(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid){ int n = grid.size(); int m = grid[0].size(); u.resize(n*m); sign.resize(n*m,0); for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ u[i*m+j] = i*m+j; if(i == 0 || i == n-1 || j == 0||j == m-1){ sign[i*m+j] = grid[i][j]; } } } }; int find(int n){ return n == u[n]?n:u[n] = find(u[n]); }; int check(int n){ if(u[n] == n) return sign[n]; if(sign[n]) return 1; return sign[n] = check(u[n]); }; void merge(int n,int m){ int tn = find(n); int tm = find(m); if(tn != tm){ u[tn] = tm; sign[tm] = sign[tm] | sign[tn] | sign[n] | sign[m]; } } private: vector\u0026lt;int\u0026gt; u; vector\u0026lt;int\u0026gt; sign; }; class Solution { int tx[4] = {1,-1,0,0}; int ty[4] = {0,0,1,-1}; public: int numEnclaves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { Union u(grid); int n = grid.size(); int m = grid[0].size(); for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j] == 0) continue; for(int k = 0;k\u0026lt;4;k++){ int dx = i + tx[k]; int dy = j + ty[k]; if(dx\u0026gt;=0\u0026amp;\u0026amp;dx\u0026lt;n\u0026amp;\u0026amp;dy\u0026gt;=0\u0026amp;\u0026amp;dy\u0026lt;m\u0026amp;\u0026amp;grid[dx][dy]) u.merge(i*m+j, dx*m+dy); } } } int ans = 0; for(int i = 0;i\u0026lt;n;i++){ for(int j = 0;j\u0026lt;m;j++){ if(grid[i][j] == 0) continue; if(!u.check(i*m+j)) ans++; } } return ans; } };   ","date":"2022-02-12T09:50:17+08:00","permalink":"https://blog.jhas.site/p/20220212-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1020-%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F/","title":"20220212 每日一题 Leetcode1020 飞地的数量"},{"content":"1984. 学生分数的最小差值 题面 给你一个 下标从 0 开始 的整数数组 $nums$ ，其中 $nums[i]$ 表示第 $i$ 名学生的分数。另给你一个整数 $k$ 。\n从数组中选出任意 $k$ 名学生的分数，使这 $k$ 个分数间 最高分 和 最低分 的 差值 达到 最小化 。\n返回可能的 最小差值 。\n解析 若使$k$名学生的分数差值达到最小化，从$nums$取$k$个数，如果这$k$个数正好是最大最小数差值最小化，则$nums$必无其它数在这$k$个数之间。显然若使从$nums$取出任意$i$都满足从$i$后取$k$个数差值最小化，则数组必然有序。\n解法 将数组排序然后枚举$i$滑动窗口即可\n时间复杂度: $O( n \\log n)$\n1 2 3 4 5 6 7 8 9 10 11 12  class Solution { public: int minimumDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int i,n = nums.size(),ans; sort(nums.begin(),nums.end()); ans = 100010; for(i = k - 1;i\u0026lt;n;i++){ ans = min(ans,nums[i] - nums[i - k + 1]); } return ans; } };   ","date":"2022-02-11T12:56:58+08:00","permalink":"https://blog.jhas.site/p/20220211-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1984-%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/","title":"20220211 每日一题 Leetcode1984 学生分数的最小差值"},{"content":"二分搜索 简述 二分搜索是一种效率较高的查找方法，用于在有序(二段)数组内查找一个特定数。得益于有序(二段)数组的性质，每一次查找可以筛除一段数量大于一的数段(常见为$\\frac{n}{2} $),故能在$ O(\\log n) $的时间复杂度内找到对应答案。\n二分的本质是二段性而不是单调性\n应用 二分通常被用于一个有序数组查找一个数或一个位置，这个数通常是一个最小或最大值/位置(边界位置)。\n常见二分通常有两种：\n 整数二分 浮点二分  整数二分 整数二分通常查找一个范围的上界或下界\n比如说不超过/不低于某个数最大/最小的数的位置与其值。\n总的来说，查找的区间可以被分为两个部分，一个部分满足条件，另一部分不满足条件，答案则在两部分的交点。\n浮点二分 通常是函数求根、开方等问题，比较简单，while循环终止条件是精度e，更新时l和r都更新为mid即可。\n基本代码 整数二分有两种，一种是寻找上界(即寻找不符合性质的最后一个点)，一种是下界(即寻找符合性质的第一个点)\n整数二分上界 1 2 3 4 5 6 7 8 9 10  int bsearch(int l, int r) { while (l \u0026lt; r) { int mid = l + r + 1 \u0026gt;\u0026gt; 1; if (check(mid)) l = mid; else r = mid - 1; } return l; }   整数二分下界 1 2 3 4 5 6 7 8 9 10  int bsearch(int l, int r) { while (l \u0026lt; r) { int mid = l + r \u0026gt;\u0026gt; 1; if (check(mid)) r = mid; else l = mid + 1; } return l; }   浮点二分则比较单调，通常是函数求根、开方等问题\n浮点二分 1 2 3 4 5 6 7 8 9 10 11 12  int main() { double n; cin \u0026gt;\u0026gt; n; double l = -10000, r = 10000, mid; while(r - l \u0026gt; 1e-7){ mid = (l + r) / 2; if(check(mid)) r = mid; else l = mid ; } printf(\u0026#34;%.6f\u0026#34;, l); }   STL STL里提供了lower_bound()和upper_bound()两个函数用于一个排好序的数组二分查找\nlower_bound:返回数组中第一个大于或等于被查数的迭代器\nupper_bound:返回数组中第一个大于被查数的迭代器\n1 2 3 4 5 6 7 8 9  int main(){ int num[6]={1,2,4,7,15,34}; sort(num.begin(),num.end()); int lower_idx = lower_bound(num.begin(),num.end(),4) - num.begin(); // 值为2，lower_bound返回了位置为2的迭代器  int upper_idx = upper_bound(num.begin(),num.end(),4) - num.begin(); // 值为3, upper_bound返回了位置为3的迭代器  sort(num.begin(),num.end(),greater\u0026lt;int\u0026gt;()); //从大到小排序,此时为 [34,15,7,4,2,1]  int greater_lower_idx = lower_bound(num.begin(),num.end(),4,greater\u0026lt;int\u0026gt;()) - num.begin();// 值为3,lower_bound返回了位置为3的迭代器,即查找到第一个小于或等于4的数  int greater_upper_idx = lower_bound(num.begin(),num.end(),4,greater\u0026lt;int\u0026gt;()) - num.begin();// 值为4,lower_bound返回了位置为4的迭代器,即查找到第一个小于4的数 }   这里不得不提到 greater() 和 less() 了\n其实其内部结构为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  template\u0026lt;class _Ty = void\u0026gt; struct less { // functor for operator\u0026lt;  typedef _Ty first_argument_type; typedef _Ty second_argument_type; typedef bool result_type; constexpr bool operator()(const _Ty\u0026amp; _Left, const _Ty\u0026amp; _Right) const { // apply operator\u0026lt; to operands  return (_Left \u0026lt; _Right); } }; template\u0026lt;class _Ty = void\u0026gt; struct greater { // functor for operator\u0026gt;  typedef _Ty first_argument_type; typedef _Ty second_argument_type; typedef bool result_type; constexpr bool operator()(const _Ty\u0026amp; _Left, const _Ty\u0026amp; _Right) const { // apply operator\u0026gt; to operands  return (_Left \u0026gt; _Right); } };   这是一个仿函数, 以greater()为例, greater()其实获得了一个匿名对象，而这个对象等效于\n1 2 3  bool cmp(const int\u0026amp; _Left, const int\u0026amp; _Right) const { return _Left \u0026gt; _Right }   或者\n1 2 3  [](const int\u0026amp; _Left, const int\u0026amp; _Right) -\u0026gt; bool { return _Left \u0026gt; _Right }   即一个比较函数\n回到二分查找的STL，下面是它们的源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  _ForwardIterator __lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp\u0026amp; __val, _Compare __comp) { typedef typename iterator_traits\u0026lt;_ForwardIterator\u0026gt;::difference_type _DistanceType; _DistanceType __len = std::distance(__first, __last); while (__len \u0026gt; 0) { _DistanceType __half = __len \u0026gt;\u0026gt; 1; _ForwardIterator __middle = __first; std::advance(__middle, __half); if (__comp(__middle, __val)) { __first = __middle; ++__first; __len = __len - __half - 1; } else __len = __half; } return __first; } _ForwardIterator __upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp\u0026amp; __val, _Compare __comp) { typedef typename iterator_traits\u0026lt;_ForwardIterator\u0026gt;::difference_type _DistanceType; _DistanceType __len = std::distance(__first, __last); while (__len \u0026gt; 0) { _DistanceType __half = __len \u0026gt;\u0026gt; 1; _ForwardIterator __middle = __first; std::advance(__middle, __half); if (__comp(__val, __middle)) __len = __half; else { __first = __middle; ++__first; __len = __len - __half - 1; } } return __first; }   主要的差别在于__comp()的用法，而__comp()又是我们的仿函数以less()为例，则差别在于lower_bound比较 $ mid \u0026lt; val$ 而upper_bound比较 $val \u0026lt; mid$\n对于 lower_bound来说，如果__comp()为true则将first设置为mid，否则将长度减少一半(STL里二分使用长度来表示)。\n对于 upper_bound来说，如果__comp()为true则将长度减少一半，否则将将first设置为mid，\n区别在于两个true表示的范围不一样，\n更直观的表示是，如果将upper_bound改写成以下形式\n1 2 3 4 5 6 7 8  if (!__comp(__val, __middle)){ __first = __middle; ++__first; __len = __len - __half - 1; } else{ __len = __half; }   其实是将if else切换一下\n这个时候$mid \u0026lt;= val$ 正巧比lower_bound多了个等号，即右范围涵盖了mid，这就是upper_bound与lower_bound的差别，\n总的来说，STL里的upper_bound与lower_bound其实实现的是整数二分下界，区别在于__comp的应用和二段的划分\n经典题目 Leetcode704. 二分查找\n标准二分查找\nacwing789. 数的范围\n二分边界查找(上界\\下界)\nacwing790. 数的三次方根\n二分浮点\nLeetcode1984. 学生分数的最小差值\n这个不是很经典，但是可以用二分答案做\n参考文章 AcWing 789. 数的范围（详细分析二分过程）\n二分查找算法模板\nAcWing 789. 二分模板笔记\nC++：greater和less\n关于lower_bound( )和upper_bound( )的常见用法\n","date":"2022-02-10T12:07:04+08:00","permalink":"https://blog.jhas.site/p/%E4%BA%8C%E5%88%86%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E7%AC%94%E8%AE%B0/","title":"二分范围查找笔记"},{"content":"1447. 最简分数 题面 给你一个整数 n ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于 n 的 最简 分数 。分数可以以 任意 顺序返回。\n解析 非常简单的暴力数论题，对于任意 $ i$ $j $ 来说，满足 $ 0\u0026lt; j/i \u0026lt;1 $ 即满足 $ j \u0026lt; i $ ,考虑到 $ 1\\leq n \\leq 100 $ 则只需暴力枚举每一个 $i$,$j$ 即可得出答案，对于任意$i$,$j$ ，满足$ j/i $为最简分数，即两数不可同时除以任意数且结果为整数，即两数互质，等价于 $ gcd(i,j) = 1 $\n解法 时间复杂度:$ O(n^2\\log n) $\n代码如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution { public: vector\u0026lt;string\u0026gt; simplifiedFractions(int n) { vector\u0026lt;string\u0026gt; ret; for(int i = 2;i\u0026lt;=n;i++){ for(int j = 1;j\u0026lt;i;j++){ if(__gcd(i,j) == 1){ ret.push_back(itoa(j)+\u0026#34;/\u0026#34;+itoa(i)); } } } return ret; } string itoa(int i){ if(i== 0) return \u0026#34;\u0026#34;; return itoa(i/10) + char(\u0026#39;0\u0026#39; + i%10); } };   ","date":"2022-02-10T08:40:23+08:00","permalink":"https://blog.jhas.site/p/20220210-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode1447-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/","title":"20220210 每日一题 Leetcode1447 最简分数"},{"content":"2006. 差的绝对值为 K 的数对数目 题面 给你一个整数数组 nums 和一个整数 k ，请你返回数对 (i, j) 的数目，满足 i \u0026lt; j 且 |nums[i] - nums[j]| == k 。\n|x| 的值定义为：\n如果 x \u0026gt;= 0 ，那么值为 x 。 如果 x \u0026lt; 0 ，那么值为 -x 。\n解析 题目非常白给，照着题目意思顺下去分析即可\n对于 $$ |nums[i] - nums[j]| = k $$ 拆解后有两种可能 $$ nums[i] = k + nums[j] $$ 与 $$ nums[i] = nums[j] - k $$ 既对于任意 $ j $ 只需要统计到 $ i\u0026lt;j $ 的数目即可\n解法一 时间复杂度 $ O(n^2)$\n空间复杂度 $ O(1) $\n暴力枚举每一个j与i，检查是否正确\n解法二 时间复杂度 $ O(n) $\n空间复杂度 $ O(n) $\n对于每一个 j ，其都会成为下一个 j 枚举中的 i，只需要使用哈希表记录下当前 j 位置的值出现的次数，就能在 $ O(1) $ 的时间复杂度代价下求得 j 位置上构成数对的数目。\n1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution { public: int countKDifference(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { unordered_map\u0026lt;int,int\u0026gt; mp; int ans = 0; for(auto \u0026amp;\u0026amp; j : nums){ ans += mp[k+j]; ans += mp[j-k]; mp[j]++; } return ans; } };   ","date":"2022-02-09T20:42:21+08:00","permalink":"https://blog.jhas.site/p/20220209-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-leetcode2006-%E5%B7%AE%E7%9A%84%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%BAk%E7%9A%84%E6%95%B0%E5%AF%B9%E6%95%B0%E7%9B%AE/","title":"20220209 每日一题 Leetcode2006 差的绝对值为K的数对数目"}]